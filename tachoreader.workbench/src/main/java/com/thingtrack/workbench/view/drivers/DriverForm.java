package com.thingtrack.workbench.view.drivers;

import java.util.Date;

import com.thingtrack.tachoreader.domain.Driver;
import com.thingtrack.tachoreader.domain.User;
import com.thingtrack.tachoreader.service.api.UserService;
import com.thingtrack.workbench.WorkbenchUI;
import com.thingtrack.workbench.component.AbstractI18NValidableCustomComponent;
import com.thingtrack.workbench.component.UserField;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.fieldgroup.PropertyId;
import com.vaadin.data.validator.BeanValidator;
import com.vaadin.data.validator.EmailValidator;
import com.vaadin.server.UserError;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class DriverForm extends AbstractI18NValidableCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet driverTabSheet;
	@AutoGenerated
	private VerticalLayout userLayout;
	@AutoGenerated
	@PropertyId("user")
	private UserField userField;
	@AutoGenerated
	private VerticalLayout driverLayout;
	@AutoGenerated
	private HorizontalLayout cardExpiryLayout;
	@AutoGenerated
	private CheckBox accountUserField;
	@AutoGenerated
	@PropertyId("cardExpiryDate")
	private PopupDateField cardExpiryDateField;
	@AutoGenerated
	@PropertyId("cardHolderBirthDate")
	private PopupDateField cardHolderBirthDateField;
	@AutoGenerated
	@PropertyId("cardNumber")
	private TextField cardNumberField;
	@AutoGenerated
	@PropertyId("email")
	private TextField driverEmailField;
	@AutoGenerated
	private HorizontalLayout nameLayout;
	@AutoGenerated
	@PropertyId("active")
	private CheckBox activeField;
	@AutoGenerated
	@PropertyId("name")
	private TextField driverNameField;
	private UserService userService;
	
	private static final int TAB_DRIVER = 0;
	private static final int TAB_USER = 1;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DriverForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here		
    	initialize();
    	
    	// get Services
    	getServices();
    	    	
    	accountUserField.addValueChangeListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				Driver driver = (Driver)getData();
				
				if (accountUserField.getValue()) {					
					try {							
						// initialize driver account and set visible the tab configuration												
						if (driver.getUser() == null){												
							User user = userService.createNewEntity(WorkbenchUI.getCurrent().getUser().getOrganizationDefault(), driver, WorkbenchUI.getCurrent().getUser().getLanguage());
							
							userField.setValue(user);
							driver.setUser(user);
						}
						
						driverTabSheet.getTab(TAB_USER).setVisible(true);						
						driverTabSheet.setSelectedTab(TAB_USER);
												
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				else {		
					userField.setValue(null);
					driver.setUser(null);
					
					driverTabSheet.getTab(TAB_USER).setVisible(false);					
					driverTabSheet.setSelectedTab(TAB_DRIVER);
					
					driverNameField.focus();
				}
			}
		});
	}
	
	@Override 
	public void attach() {
		super.attach();
		
    	// initialize user account
		Driver driver = (Driver)getData();
		
		if (driver.getUser() != null) {
			accountUserField.setValue(true);
			driverTabSheet.setSelectedTab(TAB_DRIVER);
		}
		else
			driverTabSheet.getTab(TAB_USER).setVisible(false);
	}
	
	private void initialize() {
		driverNameField.setNullSettingAllowed(false);
		driverNameField.setNullRepresentation("");
		driverNameField.setImmediate(false);
		driverNameField.setValidationVisible(true);
		driverNameField.addValidator(new BeanValidator(Driver.class, "name"));

		driverEmailField.setNullSettingAllowed(true);
		driverEmailField.setNullRepresentation("");
		driverEmailField.setImmediate(false);
		driverEmailField.addValidator(new EmailValidator("Set a correct email"));
		
		cardNumberField.setNullSettingAllowed(false);
		cardNumberField.setNullRepresentation("");
		cardNumberField.setImmediate(false);
		cardNumberField.setValidationVisible(true);
		cardNumberField.addValidator(new BeanValidator(Driver.class, "cardNumber"));				
		
		cardHolderBirthDateField.setImmediate(false);
		cardHolderBirthDateField.setValidationVisible(true);			
		cardHolderBirthDateField.setDateFormat("dd/MM/yyyy");
		
		cardExpiryDateField.setImmediate(false);
		cardExpiryDateField.setValidationVisible(true);	
		cardExpiryDateField.setDateFormat("dd/MM/yyyy");
		
		driverNameField.setNullSettingAllowed(true);
		driverNameField.setNullRepresentation("");			
	}	

	private void getServices() {
		this.userService = (UserService) WorkbenchUI.getCurrent().getApplicationContext().getBean("userService");		
	}
	
	@Override
	protected boolean isValidate() {
		boolean errorValidation = false;
		
		if (!driverNameField.isValid()) {
			driverNameField.setRequiredError("The driver name is required");
			errorValidation = true;
		}
		else
			driverNameField.setRequiredError(null);

		if (!cardNumberField.isValid()) {
			cardNumberField.setRequiredError("The card number is required");
			errorValidation = true;
		}
		else
			cardNumberField.setRequiredError(null);

		if (!driverEmailField.isValid()) {
			cardNumberField.setRequiredError("The format email is not valid");
			errorValidation = true;
		}
		else
			cardNumberField.setRequiredError(null);
		
		if (!cardHolderBirthDateField.isValid()) {
			cardHolderBirthDateField.setRequiredError("The driver birthdate is required");
			cardHolderBirthDateField.setComponentError(null);
			errorValidation = true;
		}
		else {
			cardHolderBirthDateField.setRequiredError(null);
					
			if (!cardHolderBirthDateField.getValue().before(new Date())) {
				cardHolderBirthDateField.setComponentError(new UserError("The driver birthdate can not exceed the current"));
				errorValidation = true;
			}
			else
				cardHolderBirthDateField.setComponentError(null);			
		}
				
		if (!cardExpiryDateField.isValid()) {
			cardExpiryDateField.setRequiredError("The card expiricy date is required");
			cardExpiryDateField.setComponentError(null);
			errorValidation = true;
		}
		else {
			cardExpiryDateField.setRequiredError(null);
			
			if (!cardExpiryDateField.getValue().after(new Date())) {
				cardExpiryDateField.setComponentError(new UserError("The card expiricy date can not be before today"));
				errorValidation = true;
			}
			else
				cardExpiryDateField.setComponentError(null);						
		}
		
		if (accountUserField.getValue()) {
			 if (userField.isValid())
				errorValidation = true;
		}
		
		return errorValidation;		
	}
	
	@Override
	protected void updateLabels() {
		driverTabSheet.getTab(TAB_DRIVER).setCaption(getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverForm.driverTabSheet.tabDriver.caption"));
		driverTabSheet.getTab(TAB_USER).setCaption(getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverForm.driverTabSheet.tabUser.caption"));
		driverNameField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverForm.driverNameField.caption"));
		cardNumberField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverForm.cardNumberField.caption"));
		cardHolderBirthDateField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverForm.cardHolderBirthDateField.caption"));
		cardExpiryDateField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverForm.cardExpiryDateField.caption"));		
		activeField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverForm.activeField.caption"));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("400px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("400px");
		setHeight("-1px");
		
		// driverTabSheet
		driverTabSheet = buildDriverTabSheet();
		mainLayout.addComponent(driverTabSheet);
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildDriverTabSheet() {
		// common part: create layout
		driverTabSheet = new TabSheet();
		driverTabSheet.setImmediate(true);
		driverTabSheet.setWidth("100.0%");
		driverTabSheet.setHeight("-1px");
		
		// driverLayout
		driverLayout = buildDriverLayout();
		driverTabSheet.addTab(driverLayout, "Driver", null);
		
		// userLayout
		userLayout = buildUserLayout();
		driverTabSheet.addTab(userLayout, "User", null);
		
		return driverTabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildDriverLayout() {
		// common part: create layout
		driverLayout = new VerticalLayout();
		driverLayout.setImmediate(false);
		driverLayout.setWidth("100.0%");
		driverLayout.setHeight("-1px");
		driverLayout.setMargin(false);
		driverLayout.setSpacing(true);
		
		// nameLayout
		nameLayout = buildNameLayout();
		driverLayout.addComponent(nameLayout);
		
		// driverEmailField
		driverEmailField = new TextField();
		driverEmailField.setCaption("Email");
		driverEmailField.setImmediate(false);
		driverEmailField.setWidth("300px");
		driverEmailField.setHeight("-1px");
		driverLayout.addComponent(driverEmailField);
		
		// cardNumberField
		cardNumberField = new TextField();
		cardNumberField.setCaption("Card number");
		cardNumberField.setImmediate(false);
		cardNumberField.setWidth("200px");
		cardNumberField.setHeight("-1px");
		cardNumberField.setRequired(true);
		driverLayout.addComponent(cardNumberField);
		
		// cardHolderBirthDateField
		cardHolderBirthDateField = new PopupDateField();
		cardHolderBirthDateField.setCaption("Birthdate");
		cardHolderBirthDateField.setImmediate(false);
		cardHolderBirthDateField.setWidth("150px");
		cardHolderBirthDateField.setHeight("-1px");
		cardHolderBirthDateField.setRequired(true);
		driverLayout.addComponent(cardHolderBirthDateField);
		
		// cardExpiryLayout
		cardExpiryLayout = buildCardExpiryLayout();
		driverLayout.addComponent(cardExpiryLayout);
		
		return driverLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildNameLayout() {
		// common part: create layout
		nameLayout = new HorizontalLayout();
		nameLayout.setImmediate(false);
		nameLayout.setWidth("100.0%");
		nameLayout.setHeight("-1px");
		nameLayout.setMargin(false);
		nameLayout.setSpacing(true);
		
		// driverNameField
		driverNameField = new TextField();
		driverNameField.setCaption("Name");
		driverNameField.setImmediate(false);
		driverNameField.setWidth("300px");
		driverNameField.setHeight("-1px");
		driverNameField.setRequired(true);
		nameLayout.addComponent(driverNameField);
		
		// activeField
		activeField = new CheckBox();
		activeField.setCaption("Active");
		activeField.setImmediate(true);
		activeField.setWidth("-1px");
		activeField.setHeight("-1px");
		nameLayout.addComponent(activeField);
		nameLayout.setExpandRatio(activeField, 1.0f);
		nameLayout.setComponentAlignment(activeField, new Alignment(10));
		
		return nameLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildCardExpiryLayout() {
		// common part: create layout
		cardExpiryLayout = new HorizontalLayout();
		cardExpiryLayout.setImmediate(false);
		cardExpiryLayout.setWidth("100.0%");
		cardExpiryLayout.setHeight("-1px");
		cardExpiryLayout.setMargin(false);
		
		// cardExpiryDateField
		cardExpiryDateField = new PopupDateField();
		cardExpiryDateField.setCaption("Expiricy Card");
		cardExpiryDateField.setImmediate(false);
		cardExpiryDateField.setWidth("150px");
		cardExpiryDateField.setHeight("-1px");
		cardExpiryDateField.setRequired(true);
		cardExpiryLayout.addComponent(cardExpiryDateField);
		
		// userField
		accountUserField = new CheckBox();
		accountUserField.setCaption("With account");
		accountUserField.setImmediate(false);
		accountUserField.setWidth("-1px");
		accountUserField.setHeight("-1px");
		accountUserField.setRequired(true);
		cardExpiryLayout.addComponent(accountUserField);
		cardExpiryLayout.setComponentAlignment(accountUserField, new Alignment(34));
		
		return cardExpiryLayout;
	}

	@AutoGenerated
	private VerticalLayout buildUserLayout() {
		// common part: create layout
		userLayout = new VerticalLayout();
		userLayout.setImmediate(false);
		userLayout.setWidth("100.0%");
		userLayout.setHeight("-1px");
		userLayout.setMargin(false);
		userLayout.setSpacing(true);
		
		// userfField
		userField = new UserField();
		userField.setImmediate(true);
		userField.setWidth("100.0%");
		userField.setHeight("-1px");
		userLayout.addComponent(userField);
		
		return userLayout;
	}
}
