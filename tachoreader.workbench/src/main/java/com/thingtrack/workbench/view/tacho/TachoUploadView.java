package com.thingtrack.workbench.view.tacho;

import java.io.File;
import java.text.DecimalFormat;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.stereotype.Component;
import org.tacografo.file.exception.ExceptionDriverNotExist;
import org.tacografo.file.exception.ExceptionFileExist;
import org.tacografo.file.exception.ExceptionVehicleNotExist;

import pl.exsio.plupload.Plupload;
import pl.exsio.plupload.PluploadError;
import pl.exsio.plupload.PluploadFile;
import pl.exsio.plupload.helper.filter.PluploadFilter;
import ru.xpoft.vaadin.VaadinView;

import com.thingtrack.tachoreader.domain.TachoDriver;
import com.thingtrack.tachoreader.service.api.TachoService;
import com.thingtrack.workbench.WorkbenchUI;
import com.thingtrack.workbench.component.AbstractI18NView;
import com.thingtrack.workbench.component.Broadcaster;
import com.thingtrack.workbench.component.NotificationHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.themes.ValoTheme;

@Component
@Scope("prototype")
@VaadinView(value=TachoUploadView.NAME, cached=true)
public class TachoUploadView extends AbstractI18NView implements View {
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Panel pnRulesUploadTachos;

	@AutoGenerated
	private VerticalLayout verticalLayout_4;

	@AutoGenerated
	private Label lblRulesUploadTachos;

	@AutoGenerated
	private VerticalLayout mainUploadTachos;

	@AutoGenerated
	private Table tachosUploadList;

	@AutoGenerated
	private HorizontalLayout tachosToolbarLayout;

	@AutoGenerated
	private Plupload btnSelectTachos;

	@AutoGenerated
	private Panel pnHelpUploadTachos;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private Label lblTachoUploadHelp;

	private static final long serialVersionUID = 1L;
	public static final String NAME = "tachos_upload";
		
	private static final String MAX_FILE_SIZE = "1mb";
	
	@Autowired
	private TachoService tachoService;
	
	private String tachoRepository;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @throws Exception 
	 */
	public TachoUploadView() throws Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		initialize();
		
		getServices();
	}
	
	@SuppressWarnings({ "serial" })
	private void initialize() throws Exception {
		// initialize upload help tachos
		pnHelpUploadTachos.setCaption("Help Upload your Tachos");
		pnHelpUploadTachos.setIcon(FontAwesome.INFO_CIRCLE);
		pnHelpUploadTachos.addStyleName("color3");	
		
		StringBuffer helpTachosUpload = new StringBuffer("Desde esta pantalla usted podrá enviar a la plataforma los ficheros de tacógrafo y/o tarjeta.<br>");
		helpTachosUpload.append("Para comenzar pulse el botón \"Sube tus Tachos\" y seleccione el/los fichero/os que desea guardar en TachoReader.");
				
		lblTachoUploadHelp.setContentMode(ContentMode.HTML);
		lblTachoUploadHelp.setValue(helpTachosUpload.toString());						
		
		// initialize upload help tachos rules
		pnRulesUploadTachos.setCaption("Rules Upload your Tachos");
		pnRulesUploadTachos.setIcon(FontAwesome.INFO_CIRCLE);
		pnRulesUploadTachos.addStyleName("color3");	
		
		StringBuffer rulesTachosUpload = new StringBuffer("<ul><li>El tamaño máximo de los ficheros enviados será de 1 MB (el número de ficheros es ilimitado).</li>");
		rulesTachosUpload.append("<li>Solamente los ficheros de tacógrafo (TGD,DDD,CRD,ESM,DC,TDC) están permitidos.</li>");
		rulesTachosUpload.append("<li>Los ficheros enviados y registrados correctamente quedarán guardados en la plataforma.</li></ul>");

		lblRulesUploadTachos.setContentMode(ContentMode.HTML);
		lblRulesUploadTachos.setValue(rulesTachosUpload.toString());
		
		// configure upload tachos button
		btnSelectTachos.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		btnSelectTachos.setMultiSelection(true);
		btnSelectTachos.setPreventDuplicates(false);
		btnSelectTachos.addFilter(new PluploadFilter("Tachograph files", "ddd,tgd,crd,esm,dc,tdc"));
		btnSelectTachos.setMaxFileSize(MAX_FILE_SIZE);
		
		// show notification after file is uploaded
		btnSelectTachos.addClickListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				tachosUploadList.removeAllItems();				
			}
		});		
		
		btnSelectTachos.addFileUploadedListener(new Plupload.FileUploadedListener() {
			@Override
	        public void onFileUploaded(PluploadFile file) {		    	   	            
	    	   Item tachoItem = tachosUploadList.getItem(file.getName());
	    	   	    		   
    		   UploadTachoComponent uploadTachoComponent = (UploadTachoComponent)tachoItem.getItemProperty("Message").getValue();	    		   
    		   uploadTachoComponent.setMessageType(UploadTachoComponent.MESSAGE_TYPE.INFO);
    		   uploadTachoComponent.setMessage("Tacho registered correctly");	
    		   
	    	   DecimalFormat twoDForm = new DecimalFormat("#.##");		    		   
    		   String size = twoDForm.format(file.getSize() / 1024.0f) + " KB";
	    	   ProgressTachoComponent progressTachoComponent = (ProgressTachoComponent)tachoItem.getItemProperty("Size").getValue();
    		   progressTachoComponent.setTotalTachoSize(size);
    		   
    		   // register tacho
    		   try {			    	   	 
	    		   Object tacho = tachoService.setRegisterTacho(WorkbenchUI.getCurrent().getUser(),
	    				   										WorkbenchUI.getCurrent().getUser().getUsername(), 
	    				   										WorkbenchUI.getCurrent().getUser().getPassword(), 
																(File)file.getUploadedFile(), 
																file.getName(),
																tachoRepository);
	    		   
			    	// Broadcast tacho inserted
	    		   if (tacho instanceof TachoDriver)
	    			   Broadcaster.broadcast((TachoDriver)tacho);
	    		   /*if (tacho instanceof TachoVehicle)
	    			   Broadcaster.broadcast((TachoVehicle)tacho);*/
					
				   NotificationHelper.sendInformationNotification("Tacho View", "I've just uploaded tacho file: " + file.getName());
				} catch (Exception e) {
					if (e.getCause() instanceof ExceptionVehicleNotExist) {
						ExceptionVehicleNotExist ex = (ExceptionVehicleNotExist) e.getCause();
						
						NotificationHelper.sendErrorNotification("Tacho View", "The vehicle " + ex.getRegistration() + " is not registered");
					}
					else if (e.getCause() instanceof ExceptionFileExist) {
						ExceptionFileExist ex = (ExceptionFileExist) e.getCause();
						
						NotificationHelper.sendErrorNotification("Tacho View", "The tacho " + ex.getFileName() + " has already been registered");
					}
					else if (e.getCause() instanceof ExceptionDriverNotExist) {
						ExceptionDriverNotExist ex = (ExceptionDriverNotExist) e.getCause();
						
						NotificationHelper.sendErrorNotification("Tacho View", "There is no driver with this identification card " + ex.getCardNumber() + " registered");
					}
					else
						NotificationHelper.sendErrorNotification("Tacho View", e.getMessage());					
				}
	        }
		});
		
		// update upload progress
		btnSelectTachos.addUploadProgressListener(new Plupload.UploadProgressListener() {
	        @Override
	        public void onUploadProgress(PluploadFile file) {		    	   
	    	   Item tachoItem = tachosUploadList.getItem(file.getName());
	    	   
    		   UploadTachoComponent uploadTachoComponent = (UploadTachoComponent)tachoItem.getItemProperty("Message").getValue();	    		   
    		   uploadTachoComponent.setMessageType(UploadTachoComponent.MESSAGE_TYPE.INFO);
    		   uploadTachoComponent.setMessage("Tacho is uploading ...");	
    		   
	    	   ProgressTachoComponent progressTachoComponent = (ProgressTachoComponent)tachoItem.getItemProperty("Size").getValue();
    		   progressTachoComponent.setTachoProgressBar(file.getPercent());
    		   
    		   Button actionTachoComponent = (Button)tachoItem.getItemProperty("Event").getValue();
    		   actionTachoComponent.setEnabled(true);
	        }
		});
		
		// autostart the uploader after addind files
		btnSelectTachos.addFilesAddedListener(new Plupload.FilesAddedListener() {
		    @SuppressWarnings("unchecked")
		    @Override
	        public void onFilesAdded(PluploadFile[] files) {	    	   
	    	   for (int i = 0; i < files.length; i++){
	    		   UploadTachoComponent uploadTachoComponent = new UploadTachoComponent(files[i].getName(), UploadTachoComponent.MESSAGE_TYPE.INFO, "Correcto");
	    		   
	    		   ProgressTachoComponent progressTachoComponent = new ProgressTachoComponent();
	    		   	
	    		   Button actionTachoComponent = new Button("View Tacho");
	    		   actionTachoComponent.setEnabled(false);
	    		   actionTachoComponent.addStyleName(ValoTheme.BUTTON_SMALL);
	    		   actionTachoComponent.addStyleName(ValoTheme.BUTTON_PRIMARY);
	    		   		    		   
	    		   Item tachoItem = tachosUploadList.addItem(files[i].getName());		    		   
	    		   
	    		   tachoItem.getItemProperty("Message").setValue(uploadTachoComponent);
	    		   tachoItem.getItemProperty("Size").setValue(progressTachoComponent);
	    		   tachoItem.getItemProperty("Event").setValue(actionTachoComponent);		    		  
	    	   }
	    	     	  		    	   
	    	   btnSelectTachos.start();
	        }
		});
		
		// notify, when the upload process is completed
		btnSelectTachos.addUploadCompleteListener(new Plupload.UploadCompleteListener() {
	        @Override
	        public void onUploadComplete() {
	    	   Notification.show("Upload Process finished");
	    	   	    
	        }
		});
		
		// handle errors
		btnSelectTachos.addErrorListener(new Plupload.ErrorListener() {
		    @SuppressWarnings("unchecked")
			@Override
	        public void onError(PluploadError error) {		    			    	   
	    	   Item tachoItem = tachosUploadList.getItem(error.getFile().getName());
	    	   
	    	   if (tachoItem != null) {
	    		   UploadTachoComponent uploadTachoComponent = (UploadTachoComponent)tachoItem.getItemProperty("Message").getValue();	    		   
	    		   uploadTachoComponent.setMessageType(UploadTachoComponent.MESSAGE_TYPE.ERROR);
	    		   uploadTachoComponent.setMessage(error.getMessage());
	    	   }
	    	   else {
	    		   UploadTachoComponent uploadTachoComponent = new UploadTachoComponent(error.getFile().getName(), UploadTachoComponent.MESSAGE_TYPE.ERROR, error.getMessage());
	    		   
	    		   ProgressTachoComponent progressTachoComponent = new ProgressTachoComponent();	    		   	
	    		   progressTachoComponent.setTotalTachoSize("0 KB");
	    		   
	    		   Button actionTachoComponent = new Button("View Tacho");
	    		   actionTachoComponent.setEnabled(false);
	    		   actionTachoComponent.addStyleName(ValoTheme.BUTTON_SMALL);
	    		   actionTachoComponent.addStyleName(ValoTheme.BUTTON_PRIMARY);
	    		   		    		   
	    		   tachoItem = tachosUploadList.addItem(error.getFile().getName());		    		   
	    		   
	    		   tachoItem.getItemProperty("Message").setValue(uploadTachoComponent);
	    		   tachoItem.getItemProperty("Size").setValue(progressTachoComponent);
	    		   tachoItem.getItemProperty("Event").setValue(actionTachoComponent);	
	    	   }
	        }
		});
		
		// intialize result upload table
		tachosUploadList.addStyleName(ValoTheme.TABLE_NO_HEADER);
		tachosUploadList.addStyleName(ValoTheme.TABLE_NO_VERTICAL_LINES);
		tachosUploadList.addStyleName(ValoTheme.TABLE_NO_HORIZONTAL_LINES);
		tachosUploadList.addStyleName(ValoTheme.TABLE_NO_STRIPES);
		tachosUploadList.addStyleName(ValoTheme.TABLE_BORDERLESS);
				
		tachosUploadList.removeAllItems();
		tachosUploadList.addContainerProperty("Message", CustomComponent.class, null);
		tachosUploadList.addContainerProperty("Size", CustomComponent.class, null);
		tachosUploadList.addContainerProperty("Event", Button.class, null);			
	}
	
	private void getServices() {		
		// get Tacho Repository configuration
		PropertySourcesPlaceholderConfigurer appConfig = (PropertySourcesPlaceholderConfigurer) WorkbenchUI.getCurrent().getApplicationContext().getBean("appConfig");
		
		if (appConfig != null)
			tachoRepository = appConfig.getAppliedPropertySources().get("localProperties").getProperty("tacho.repository").toString();		
	}
	
	@Override
    public void enter(ViewChangeEvent event) {
		tachosUploadList.removeAllItems();
    }
	
	@PostConstruct
    public void PostConstruct() {        	
    	
    }

	@Override
	protected void updateLabels() {
		btnSelectTachos.setCaption(getI18N().getMessage("com.thingtrack.workbench.component.ToolbarTacho.btnUpload.caption"));
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// pnHelpUploadTachos
		pnHelpUploadTachos = buildPnHelpUploadTachos();
		mainLayout.addComponent(pnHelpUploadTachos);
		
		// mainUploadTachos
		mainUploadTachos = buildMainUploadTachos();
		mainLayout.addComponent(mainUploadTachos);
		mainLayout.setExpandRatio(mainUploadTachos, 1.0f);
		
		// pnRulesUploadTachos
		pnRulesUploadTachos = buildPnRulesUploadTachos();
		mainLayout.addComponent(pnRulesUploadTachos);
		mainLayout.setComponentAlignment(pnRulesUploadTachos, new Alignment(9));
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPnHelpUploadTachos() {
		// common part: create layout
		pnHelpUploadTachos = new Panel();
		pnHelpUploadTachos.setImmediate(false);
		pnHelpUploadTachos.setWidth("100.0%");
		pnHelpUploadTachos.setHeight("-1px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		pnHelpUploadTachos.setContent(verticalLayout_2);
		
		return pnHelpUploadTachos;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(true);
		
		// lblTachoUploadHelp
		lblTachoUploadHelp = new Label();
		lblTachoUploadHelp.setImmediate(false);
		lblTachoUploadHelp.setWidth("100.0%");
		lblTachoUploadHelp.setHeight("-1px");
		lblTachoUploadHelp.setValue("Label");
		verticalLayout_2.addComponent(lblTachoUploadHelp);
		verticalLayout_2.setExpandRatio(lblTachoUploadHelp, 1.0f);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private VerticalLayout buildMainUploadTachos() {
		// common part: create layout
		mainUploadTachos = new VerticalLayout();
		mainUploadTachos.setImmediate(false);
		mainUploadTachos.setWidth("100.0%");
		mainUploadTachos.setHeight("100.0%");
		mainUploadTachos.setMargin(false);
		mainUploadTachos.setSpacing(true);
		
		// tachosToolbarLayout
		tachosToolbarLayout = buildTachosToolbarLayout();
		mainUploadTachos.addComponent(tachosToolbarLayout);
		
		// tachosUploadList
		tachosUploadList = new Table();
		tachosUploadList.setImmediate(false);
		tachosUploadList.setWidth("100.0%");
		tachosUploadList.setHeight("100.0%");
		mainUploadTachos.addComponent(tachosUploadList);
		mainUploadTachos.setExpandRatio(tachosUploadList, 1.0f);
		
		return mainUploadTachos;
	}

	@AutoGenerated
	private HorizontalLayout buildTachosToolbarLayout() {
		// common part: create layout
		tachosToolbarLayout = new HorizontalLayout();
		tachosToolbarLayout.setImmediate(false);
		tachosToolbarLayout.setWidth("100.0%");
		tachosToolbarLayout.setHeight("-1px");
		tachosToolbarLayout.setMargin(false);
		tachosToolbarLayout.setSpacing(true);
		
		// btnSelectTachos
		btnSelectTachos = new Plupload();
		btnSelectTachos.setImmediate(false);
		btnSelectTachos.setWidth("-1px");
		btnSelectTachos.setHeight("-1px");
		tachosToolbarLayout.addComponent(btnSelectTachos);
		
		return tachosToolbarLayout;
	}

	@AutoGenerated
	private Panel buildPnRulesUploadTachos() {
		// common part: create layout
		pnRulesUploadTachos = new Panel();
		pnRulesUploadTachos.setImmediate(false);
		pnRulesUploadTachos.setWidth("100.0%");
		pnRulesUploadTachos.setHeight("-1px");
		
		// verticalLayout_4
		verticalLayout_4 = buildVerticalLayout_4();
		pnRulesUploadTachos.setContent(verticalLayout_4);
		
		return pnRulesUploadTachos;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_4() {
		// common part: create layout
		verticalLayout_4 = new VerticalLayout();
		verticalLayout_4.setImmediate(false);
		verticalLayout_4.setWidth("100.0%");
		verticalLayout_4.setHeight("100.0%");
		verticalLayout_4.setMargin(true);
		
		// lblRulesUploadTachos
		lblRulesUploadTachos = new Label();
		lblRulesUploadTachos.setImmediate(false);
		lblRulesUploadTachos.setWidth("100.0%");
		lblRulesUploadTachos.setHeight("-1px");
		lblRulesUploadTachos.setValue("Label");
		verticalLayout_4.addComponent(lblRulesUploadTachos);
		
		return verticalLayout_4;
	}
}
