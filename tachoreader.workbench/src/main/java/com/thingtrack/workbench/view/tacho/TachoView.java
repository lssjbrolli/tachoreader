package com.thingtrack.workbench.view.tacho;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.stereotype.Component;
import org.tacografo.file.exception.ExceptionDriverNotExist;
import org.tacografo.file.exception.ExceptionFileExist;
import org.tacografo.file.exception.ExceptionVehicleNotExist;
import org.tepi.filtertable.FilterTable;
import org.tepi.filtertable.datefilter.DateInterval;

import pl.exsio.plupload.Plupload.FileUploadedListener;
import pl.exsio.plupload.Plupload.UploadCompleteListener;
import pl.exsio.plupload.PluploadFile;
import ru.xpoft.vaadin.VaadinView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.converter.StringToDateConverter;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FileDownloader;
import com.vaadin.server.StreamResource;
import com.vaadin.server.StreamResource.StreamSource;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinResponse;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomTable.RowHeaderMode;
import com.vaadin.ui.Field;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.VerticalLayout;
import com.google.common.eventbus.Subscribe;
import com.thingtrack.tachoreader.domain.Driver;
import com.thingtrack.tachoreader.domain.Tacho;
import com.thingtrack.tachoreader.domain.Vehicle;
import com.thingtrack.tachoreader.service.api.DriverService;
import com.thingtrack.tachoreader.service.api.TachoService;
import com.thingtrack.tachoreader.service.api.VehicleService;
import com.thingtrack.workbench.WorkbenchUI;
import com.thingtrack.workbench.component.AbstractI18NView;
import com.thingtrack.workbench.component.ConfirmForm;
import com.thingtrack.workbench.component.NotificationHelper;
import com.thingtrack.workbench.component.PaginationToolbar;
import com.thingtrack.workbench.component.WindowForm;
import com.thingtrack.workbench.component.PaginationToolbar.ClickChangePageSizeListener;
import com.thingtrack.workbench.component.PaginationToolbar.ClickFirstPageListener;
import com.thingtrack.workbench.component.PaginationToolbar.ClickLastPageListener;
import com.thingtrack.workbench.component.PaginationToolbar.ClickNextPageListener;
import com.thingtrack.workbench.component.PaginationToolbar.ClickPreviousPageListener;
import com.thingtrack.workbench.component.PaginationToolbar.PageEvent;
import com.thingtrack.workbench.component.Toolbar;
import com.thingtrack.workbench.component.Toolbar.ClickFilterListener;
import com.thingtrack.workbench.component.Toolbar.ClickRefreshListener;
import com.thingtrack.workbench.component.Toolbar.ClickToolbarEvent;
import com.thingtrack.workbench.component.ToolbarTacho;
import com.thingtrack.workbench.component.ToolbarTacho.ClickSelectAllTachosListener;
import com.thingtrack.workbench.component.ToolbarTacho.ClickUnselectAllTachosListener;
import com.thingtrack.workbench.event.DashboardEvent.ProfileUpdatedEvent;
import com.thingtrack.workbench.event.DashboardEventBus;
import com.thingtrack.workbench.view.drivers.DriverForm;
import com.thingtrack.workbench.view.vehicle.VehicleForm;

@Component
@Scope("prototype")
@VaadinView(value=TachoView.NAME, cached=true)
public class TachoView extends AbstractI18NView implements View, ClickRefreshListener, 
			ClickChangePageSizeListener, ClickFirstPageListener, ClickPreviousPageListener, 
			ClickNextPageListener, ClickLastPageListener, ClickFilterListener, 
			ClickSelectAllTachosListener, ClickUnselectAllTachosListener, FileUploadedListener, UploadCompleteListener {
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private PaginationToolbar tachoPaginationToolbar;

	@AutoGenerated
	private FilterTable tachoTable;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private ToolbarTacho toolbarTacho;

	@AutoGenerated
	private Toolbar toolbar;

	private static final long serialVersionUID = 1L;
	public static final String NAME = "tachos";
	
	@Autowired
	private TachoService tachoService;
	
	@Autowired
	private DriverService driverService;
	
	@Autowired
	private VehicleService vehicleService;
	
	private String tachosRepository = null;
	private List<Tacho> tachos = null;
	private BeanItemContainer<Tacho> tachoContainer = new BeanItemContainer<Tacho>(Tacho.class);
	
	private boolean isUploadError = false;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @throws Exception 
	 */
	public TachoView() throws Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		initialize(); 		
	}
	
	@SuppressWarnings("serial")
	private void initialize() throws Exception {
		tachoTable.setFilterBarVisible(true);
		tachoTable.setSelectable(true);
		tachoTable.setImmediate(true);
		tachoTable.setMultiSelect(false);
		tachoTable.setNullSelectionAllowed(false);
		tachoTable.setColumnReorderingAllowed(true); 
		tachoTable.setColumnCollapsingAllowed(true);				
		tachoTable.setRowHeaderMode(RowHeaderMode.INDEX);
		
		// filter on demand
		tachoTable.setFilterOnDemand(true);
		
		// define toolbar events
		toolbar.setVisibleAddButton(false);
		toolbar.setVisibleSaveButton(false);
		toolbar.setVisibleRemoveButton(false);
		
		toolbar.addRefreshListener(this);
		toolbar.addFilterListener(this);
		
		// tachos toolbar events
		toolbarTacho.addUploadTachosListener(this);
		toolbarTacho.addUploadCompleteListener(this);
		toolbarTacho.addSelectAllTachosListener(this);
		toolbarTacho.addUnselectAllTachosListener(this);
		
		// pagination toolbar events
		tachoPaginationToolbar.addClickChangePageSizeListener(this);
		tachoPaginationToolbar.addClickFirstPageListener(this);
		tachoPaginationToolbar.addClickPreviousPageListener(this);
		tachoPaginationToolbar.addClickNextPageListener(this);
		tachoPaginationToolbar.addClickLastPageListener(this);
		
		getTachosRepository();
		
		final StreamResource tachosResource = createResource();
        FileDownloader fileDownloader = new FileDownloader(tachosResource) {
            @Override
            public boolean handleConnectorRequest(VaadinRequest request, VaadinResponse response, String path) throws IOException {
            	tachosResource.setFilename("Tachos.zip");
            	
                return super.handleConnectorRequest(request, response, path);
            }
        };
        
        fileDownloader.extend(toolbarTacho.getDownloadComponent());
        
        DashboardEventBus.register(this);
	}
	
	@Override
    public void enter(ViewChangeEvent event) {
    }
	
	@Subscribe
    public void updateUserName(final ProfileUpdatedEvent event) {
		if (event != null) {
			refreshButtonClick(null);
		}		
    }
	
	private void getTachosRepository() {
		PropertySourcesPlaceholderConfigurer appConfig = (PropertySourcesPlaceholderConfigurer) WorkbenchUI.getCurrent().getApplicationContext().getBean("appConfig");
				
		tachosRepository = appConfig.getAppliedPropertySources().get("localProperties").getProperty("tacho.repository").toString();
	}
	
	@SuppressWarnings("serial")
	@PostConstruct
    public void PostConstruct() {        	
    	if (tachoService != null) {    		
    		try {    	
    			loadDatasource(tachoPaginationToolbar.getPageNumber(), tachoPaginationToolbar.getPageSize());

    			tachoContainer.addNestedContainerProperty("driver.name");
    			tachoContainer.addNestedContainerProperty("driver.cardNumber");
    			tachoContainer.addNestedContainerProperty("vehicle.registration");
    			
    			tachoTable.setContainerDataSource(tachoContainer);    		
				    			
    			tachoTable.setVisibleColumns((Object[]) new String[] { "selected", "id", "driver.name", "driver.cardNumber", "vehicle.registration", "file", "creationDate" } );
    			tachoTable.setColumnHeaders(new String[] { "Selector", "ID", "Name", "Card Number", "Vehicle Number", "File", "Creation Date" } );
				
    			tachoTable.setColumnCollapsed("id", true);		
    			tachoTable.setColumnCollapsed("file", true);
    		
    			tachoTable.setEditable(true);
    			tachoTable.setFilterFieldVisible("selected", false);
    			tachoTable.setTableFieldFactory(new TableFieldFactory() {					
					@Override
					public Field<?> createField(Container container, Object itemId,
							Object propertyId, com.vaadin.ui.Component uiContext) {
						if("selected".equals(propertyId))  {
							CheckBox field = new CheckBox();							
							
							return field;
						}
						return null;
					}
				});
    			tachoTable.setConverter("creationDate", new StringToDateConverter() {
    			    @Override
    			    protected DateFormat getFormat(Locale locale) {
    			    	return new SimpleDateFormat("dd/MM/yyyy HH:mm");
    			    }
    			});
    			    	
    			toolbar.setTable(tachoTable);		
    			toolbar.setDownloadFileName("Tachos");
    			
    			if (tachoContainer.size() > 0)
    				tachoTable.select(tachoContainer.getIdByIndex(0));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    }
	
	@Override
	public void refreshButtonClick(ClickToolbarEvent event) {
		// recover register selected before refresh
		Tacho tachoSelected = (Tacho) tachoTable.getValue();

		loadDatasource(tachoPaginationToolbar.getPageNumber(), tachoPaginationToolbar.getPageSize());
								
		// select register in the grid
		if (tachoContainer.size() > 0 && tachoSelected != null)
			tachoTable.select(tachoContainer.getItem(tachoSelected));
		else if (tachoContainer.size() > 0)
			tachoTable.select(tachoContainer.getIdByIndex(0));
		
	}
	
	@Override
	public void addFilterClick(ClickToolbarEvent event) {
		loadDatasource(tachoPaginationToolbar.getPageNumber(), tachoPaginationToolbar.getPageSize());
		
	}
	
	@Override
	public void changePageSizeClick(PageEvent event) {
		loadDatasource(event.getPageNumber(), event.getPageSize());
		
	}
	
	@Override
	public void firstPageClick(PageEvent event) {
		loadDatasource(event.getPageNumber(), event.getPageSize());		
	}
	
	@Override
	public void previousPageClick(PageEvent event) {
		loadDatasource(event.getPageNumber(), event.getPageSize());
		
	}
	
	@Override
	public void nextPageClick(PageEvent event) {
		loadDatasource(event.getPageNumber(), event.getPageSize());
		
	}
	
	@Override
	public void lastPageClick(PageEvent event) {
		loadDatasource(event.getPageNumber(), event.getPageSize());
		
	}
	
	private void loadDatasource(int pageNumber, int pageSize) {
		try {
			Integer filterId = null;
			String filterCardNumber = null;
			String filterDriverName = null;
			String filterVehicleIdentificationNumber = null;
			Date filterCreationDateFrom = null;
			Date filterCreationDateTo = null;
			
			if (tachoTable.getFilterFieldValue("id") != null && !tachoTable.getFilterFieldValue("id").equals(""))
				filterId = Integer.parseInt(tachoTable.getFilterFieldValue("id").toString());
			if (tachoTable.getFilterFieldValue("driver.cardNumber") != null && !tachoTable.getFilterFieldValue("driver.cardNumber").equals(""))
				filterCardNumber = tachoTable.getFilterFieldValue("driver.cardNumber").toString();
			if (tachoTable.getFilterFieldValue("driver.name") != null && !tachoTable.getFilterFieldValue("driver.name").equals(""))
				filterDriverName = tachoTable.getFilterFieldValue("driver.name").toString();
			if (tachoTable.getFilterFieldValue("vehicle.registration") != null && !tachoTable.getFilterFieldValue("vehicle.registration").equals(""))
				filterVehicleIdentificationNumber = tachoTable.getFilterFieldValue("vehicle.registration").toString();				
			if (tachoTable.getFilterFieldValue("creationDate") != null && !tachoTable.getFilterFieldValue("creationDate").equals("")) {
				DateInterval dateInterval = (DateInterval)tachoTable.getFilterFieldValue("creationDate");
				
				filterCreationDateFrom = dateInterval.getFrom();
				filterCreationDateTo = dateInterval.getTo();
			}	
			
			// refresh count pages
			tachoPaginationToolbar.setTotPages(tachoService.getCount(tachoPaginationToolbar.getPageSize(), WorkbenchUI.getCurrent().getUser(),
					filterId, filterCardNumber, filterDriverName, filterVehicleIdentificationNumber, 
					filterCreationDateFrom, filterCreationDateTo));
			
			// select page registers			
			tachos = tachoService.getAll(pageNumber, pageSize, WorkbenchUI.getCurrent().getUser(),
					filterId, filterCardNumber, filterDriverName, filterVehicleIdentificationNumber, 
					filterCreationDateFrom, filterCreationDateTo);			

			tachoContainer.removeAllItems();
			tachoContainer.addAll(tachos);
							
			if (tachoContainer.size() > 0)
				tachoTable.select(tachoContainer.getIdByIndex(0));			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Override
	public void selectAllTachosClick(ToolbarTacho.ClickToolbarEvent event) {
		for (Tacho tacho : tachoContainer.getItemIds())
			tacho.setSelected(true);
		
		tachoTable.refreshRowCache();
	}
	
	@Override
	public void unselectAllTachosClick(ToolbarTacho.ClickToolbarEvent event) {		
		for (Tacho tacho : tachoContainer.getItemIds())
			tacho.setSelected(false);
		
		tachoTable.refreshRowCache();
	}
	
	@SuppressWarnings({ "serial" })
	private StreamResource createResource() throws Exception {
        return new StreamResource(new StreamSource() {
            @Override
            public InputStream getStream() {
    			try {
					return tachoService.setZipTachos(WorkbenchUI.getCurrent().getUser(), tachos, TachoView.this.tachosRepository);
				} catch (Exception e) {
					return null;
				}   
            }
        }, "Tachos.zip");
    }	

	@SuppressWarnings({ "unused", "rawtypes" })
	@Override
	public void onFileUploaded(final PluploadFile file) {
		try {			    	   	 
    	   	tachoService.setRegisterTacho(WorkbenchUI.getCurrent().getUser(),
    	   			                      WorkbenchUI.getCurrent().getUser().getUsername(), 
    	   								  WorkbenchUI.getCurrent().getUser().getPassword(), 
    	   								  (File)file.getUploadedFile(), 
    	   								  file.getName(),
    	   								  tachosRepository);
			
    	   	loadDatasource(tachoPaginationToolbar.getPageNumber(), tachoPaginationToolbar.getPageSize());
			
    	   	isUploadError = false;
    	   	NotificationHelper.sendInformationNotification("Tacho View", "I've just uploaded tacho file: " + file.getName());
    	   	
		} catch (final ExceptionDriverNotExist ex) {	
			isUploadError = true;
			@SuppressWarnings("serial")
			ConfirmForm driverConfirmForm = new ConfirmForm(getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tittle.addDriver"), getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.question.addDriver"), new ConfirmForm.CloseConfirmFormListener() {
				@Override
				public void windowDialogClose(ConfirmForm.CloseWindowDialogEvent event) {						
					if (event.getDialogResult() != ConfirmForm.DialogResult.YES)															
			    		return;	
					
					// created selected item
					Driver driver = driverService.createNewEntity(WorkbenchUI.getCurrent().getUser());
					driver.setName(ex.getDriverName());
					driver.setCardNumber(ex.getCardNumber());
					driver.setCardExpiryDate(ex.getCardExpiryDate());
					driver.setCardHolderBirthDate(ex.getDriverBirthDate());
					
					try {
						@SuppressWarnings({ "serial" })
						WindowForm<Driver> driverWindow = new WindowForm<Driver>(getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverView.tittle.add"), getI18N(), driver, new DriverForm(), new WindowForm.CloseWindowDialogListener<Driver>() {
							@Override
							public void windowDialogClose(WindowForm<Driver>.CloseWindowDialogEvent<Driver> event) {					
								if (event.getDialogResult() != WindowForm.DialogResult.OK)															
						    		return;					    		
													
								try {			
									Driver driver = event.getDomainEntity();
									
									// insert entity
									driver = driverService.save(driver);
									
									// retry insert the tacho file
						    	   	tachoService.setRegisterTacho(WorkbenchUI.getCurrent().getUser(),
											    	   			  WorkbenchUI.getCurrent().getUser().getUsername(), 
						    	   								  WorkbenchUI.getCurrent().getUser().getPassword(), 
						    	   								  (File)file.getUploadedFile(), 
						    	   								  file.getName(),
						    	   								  tachosRepository);
				
						    	   	loadDatasource(tachoPaginationToolbar.getPageNumber(), tachoPaginationToolbar.getPageSize());
				
						    	   	isUploadError = false;
						    	   	NotificationHelper.sendInformationNotification("Tacho View", "I've just uploaded tacho file: " + file.getName());
								} catch (final ExceptionVehicleNotExist ex) {
									@SuppressWarnings("serial")
									ConfirmForm vehicleConfirmForm = new ConfirmForm(getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tittle.addVehicle"), getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.question.addVehicle"), new ConfirmForm.CloseConfirmFormListener() {
										@Override
										public void windowDialogClose(ConfirmForm.CloseWindowDialogEvent event) {						
											if (event.getDialogResult() != ConfirmForm.DialogResult.YES)															
									    		return;	
											
											// created selected item
											Vehicle vehicle = vehicleService.createNewEntity(WorkbenchUI.getCurrent().getUser());
											vehicle.setRegistration(ex.getRegistration());
											
											try {
												@SuppressWarnings({ "serial" })
												WindowForm<Vehicle> vehicleWindow = new WindowForm<Vehicle>(getI18N().getMessage("com.thingtrack.workbench.view.vehicle.VehicleView.tittle.add"), getI18N(), vehicle, new VehicleForm(), new WindowForm.CloseWindowDialogListener<Vehicle>() {
													@Override
													public void windowDialogClose(WindowForm<Vehicle>.CloseWindowDialogEvent<Vehicle> event) {					
														if (event.getDialogResult() != WindowForm.DialogResult.OK)															
												    		return;					    		
																			
														try {			
															Vehicle vehicle = event.getDomainEntity();
															
															// insert entity
															vehicle = vehicleService.save(vehicle);
															
															// retry insert the tacho file
												    	   	tachoService.setRegisterTacho(WorkbenchUI.getCurrent().getUser(),
																	    	   			  WorkbenchUI.getCurrent().getUser().getUsername(), 
												    	   								  WorkbenchUI.getCurrent().getUser().getPassword(), 
												    	   								  (File)file.getUploadedFile(), 
												    	   								  file.getName(),
												    	   								  tachosRepository);
										
												    	   	loadDatasource(tachoPaginationToolbar.getPageNumber(), tachoPaginationToolbar.getPageSize());
										
												    	   	isUploadError = false;
												    	   	NotificationHelper.sendInformationNotification("Tacho View", "I've just uploaded tacho file: " + file.getName());
														} catch (ExceptionVehicleNotExist ex) {
															
														} catch (Exception e) {
															// TODO Auto-generated catch block
															e.printStackTrace();
														}
													}
												});
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
										}
									});
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
						});
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			});	
		} catch (ExceptionFileExist e) {	
			isUploadError = true;
			NotificationHelper.sendErrorNotification("Tacho View", "The tacho " + e.getFileName() + " has already been registered");					
		} catch (Exception e) {
			isUploadError =true;
			NotificationHelper.sendErrorNotification("Tacho View", e.getMessage());					
		}			
	}
	
	@Override
	public void onUploadComplete() {
		if (!isUploadError) {
			NotificationHelper.sendInformationNotification("Tacho View", "upload is completed!");
		}		
	}
	
	@Override
	protected void updateLabels() {
		if (getI18N() != null) {
			tachoTable.setColumnHeaders(new String[] {getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tachoTable.column.selector"), 
					  getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tachoTable.column.id"),
					  getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tachoTable.column.driverName"),
					  getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tachoTable.column.cardNumber"),
					  getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tachoTable.column.vehicleNumber"),
					  getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tachoTable.column.file"),
					  getI18N().getMessage("com.thingtrack.workbench.view.tacho.TachoView.tachoTable.column.creationDate")
					  });
		}
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		// tachoTable
		tachoTable = new FilterTable();
		tachoTable.setImmediate(true);
		tachoTable.setWidth("100.0%");
		tachoTable.setHeight("100.0%");
		mainLayout.addComponent(tachoTable);
		mainLayout.setExpandRatio(tachoTable, 1.0f);
		
		// tachoPaginationToolbar
		tachoPaginationToolbar = new PaginationToolbar();
		tachoPaginationToolbar.setImmediate(false);
		tachoPaginationToolbar.setWidth("-1px");
		tachoPaginationToolbar.setHeight("-1px");
		mainLayout.addComponent(tachoPaginationToolbar);
		mainLayout.setComponentAlignment(tachoPaginationToolbar, new Alignment(
				6));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		horizontalLayout_1.setSpacing(true);
		
		// toolbar
		toolbar = new Toolbar();
		toolbar.setImmediate(false);
		toolbar.setWidth("-1px");
		toolbar.setHeight("-1px");
		horizontalLayout_1.addComponent(toolbar);
		
		// toolbarTacho
		toolbarTacho = new ToolbarTacho();
		toolbarTacho.setImmediate(false);
		toolbarTacho.setWidth("-1px");
		toolbarTacho.setHeight("-1px");
		horizontalLayout_1.addComponent(toolbarTacho);
		
		return horizontalLayout_1;
	}
}
