package com.thingtrack.workbench.view.vehicle;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.fieldgroup.PropertyId;
import com.vaadin.data.validator.BeanValidator;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import com.thingtrack.tachoreader.domain.Vehicle;
import com.thingtrack.workbench.component.AbstractI18NValidableCustomComponent;

@SuppressWarnings("serial")
public class VehicleForm extends AbstractI18NValidableCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet vehicleTabSheet;
	@AutoGenerated
	private VerticalLayout descriptionLayout;
	@AutoGenerated
	@PropertyId("description")
	private TextArea descriptionField;
	@AutoGenerated
	private VerticalLayout vehicleLayout;
	@AutoGenerated
	private HorizontalLayout registrationLayout;
	@AutoGenerated
	@PropertyId("active")
	private CheckBox activeField;
	@AutoGenerated
	@PropertyId("registration")
	private TextField registrationField;
		
	private static final int TAB_VEHICLE = 0;
	private static final int TAB_DESCRIPTION = 1;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public VehicleForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here		
    	initialize();   	   
	}
	
	private void initialize() {
		registrationField.setNullSettingAllowed(false);
		registrationField.setNullRepresentation("");
		registrationField.setValidationVisible(true);
		registrationField.addValidator(new BeanValidator(Vehicle.class, "registration"));

		descriptionField.setNullSettingAllowed(true);
		descriptionField.setNullRepresentation("");		
	}	
	
	@Override
	protected boolean isValidate() {
		boolean errorValidation = false;
		
		if (!registrationField.isValid()) {
			registrationField.setRequiredError("The vehicle registration is required");
			errorValidation = true;
		}
		else
			registrationField.setRequiredError(null);
		
		return errorValidation;		
	}
	
	@Override
	protected void updateLabels() {		
		vehicleTabSheet.getTab(TAB_VEHICLE).setCaption(getI18N().getMessage("com.thingtrack.workbench.view.vehicle.VehicleForm.vehicleTabSheet.tabVehicle.caption"));
		vehicleTabSheet.getTab(TAB_DESCRIPTION).setCaption(getI18N().getMessage("com.thingtrack.workbench.view.vehicle.VehicleForm.vehicleTabSheet.tabDescription.caption"));
		registrationField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.vehicle.VehicleForm.registrationField.caption"));
		activeField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.vehicle.VehicleForm.activeField.caption"));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("400px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("400px");
		setHeight("-1px");
		
		// vehicleTabSheet
		vehicleTabSheet = buildVehicleTabSheet();
		mainLayout.addComponent(vehicleTabSheet);
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildVehicleTabSheet() {
		// common part: create layout
		vehicleTabSheet = new TabSheet();
		vehicleTabSheet.setImmediate(true);
		vehicleTabSheet.setWidth("100.0%");
		vehicleTabSheet.setHeight("-1px");
		
		// vehicleLayout
		vehicleLayout = buildVehicleLayout();
		vehicleTabSheet.addTab(vehicleLayout, "Vehicle", null);
		
		// descriptionLayout
		descriptionLayout = buildDescriptionLayout();
		vehicleTabSheet.addTab(descriptionLayout, "Description", null);
		
		return vehicleTabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildVehicleLayout() {
		// common part: create layout
		vehicleLayout = new VerticalLayout();
		vehicleLayout.setImmediate(false);
		vehicleLayout.setWidth("100.0%");
		vehicleLayout.setHeight("-1px");
		vehicleLayout.setMargin(false);
		vehicleLayout.setSpacing(true);
		
		// nameLayout
		registrationLayout = buildNameLayout();
		vehicleLayout.addComponent(registrationLayout);
		
		return vehicleLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildNameLayout() {
		// common part: create layout
		registrationLayout = new HorizontalLayout();
		registrationLayout.setImmediate(false);
		registrationLayout.setWidth("100.0%");
		registrationLayout.setHeight("-1px");
		registrationLayout.setMargin(false);
		registrationLayout.setSpacing(true);
		
		// registrationField
		registrationField = new TextField();
		registrationField.setCaption("Registration");
		registrationField.setImmediate(true);
		registrationField.setWidth("300px");
		registrationField.setHeight("-1px");
		registrationField.setRequired(true);
		registrationLayout.addComponent(registrationField);
		
		// activeField
		activeField = new CheckBox();
		activeField.setCaption("Active");
		activeField.setImmediate(true);
		activeField.setWidth("-1px");
		activeField.setHeight("-1px");
		registrationLayout.addComponent(activeField);
		registrationLayout.setExpandRatio(activeField, 1.0f);
		registrationLayout.setComponentAlignment(activeField, new Alignment(10));
		
		return registrationLayout;
	}

	@AutoGenerated
	private VerticalLayout buildDescriptionLayout() {
		// common part: create layout
		descriptionLayout = new VerticalLayout();
		descriptionLayout.setImmediate(false);
		descriptionLayout.setWidth("100.0%");
		descriptionLayout.setHeight("-1px");
		descriptionLayout.setMargin(false);
		descriptionLayout.setSpacing(true);
		
		// descriptionField
		descriptionField = new TextArea();
		descriptionField.setImmediate(true);
		descriptionField.setWidth("100.0%");
		descriptionField.setHeight("-1px");
		descriptionLayout.addComponent(descriptionField);
		
		return descriptionLayout;
	}
}
