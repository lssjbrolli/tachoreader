package com.thingtrack.workbench.view.graph;

import javax.annotation.PostConstruct;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import ru.xpoft.vaadin.VaadinView;

import com.thingtrack.workbench.component.AbstractI18NView;
import com.thingtrack.workbench.component.DriverActivityDailyCard;
import com.thingtrack.workbench.component.ToolbarDriverGraph;
import com.thingtrack.workbench.component.ToolbarDriverGraph.ClickDriverActivityQueryListener;
import com.thingtrack.workbench.component.ToolbarDriverGraph.ClickQueryEvent;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;

@Component
@Scope("prototype")
@VaadinView(value=GraphView.NAME, cached=true)
public class GraphView extends AbstractI18NView implements View, ClickDriverActivityQueryListener {
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Panel graphPanel;
	
	@AutoGenerated
	private VerticalLayout graphLayout;

	@AutoGenerated
	private ToolbarDriverGraph toolbarDriverGraph;

	private static final long serialVersionUID = 1L;
	public static final String NAME = "graphs";
			
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public GraphView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here		
		initialize();	
	}
	
	private void initialize() {
		// define toolbar events
		toolbarDriverGraph.addClickDriverActivityQueryListener(this);
	}
	
	@Override
    public void enter(ViewChangeEvent event) {
    }

	@PostConstruct
    public void PostConstruct() {        	    	
    }

	@Override
	public void queryDriveActivityClick(ClickQueryEvent event) {						
		try {
			// remove all driver activity cards
			graphLayout.removeAllComponents();
			
			// paint driver activity card
			DriverActivityDailyCard driverActivityDailyCard = new DriverActivityDailyCard();
			driverActivityDailyCard.paintCard(event.getDriver(), event.getRegisterDate());
			
			// add driver activity card
			graphLayout.addComponent(driverActivityDailyCard);
		} catch (Exception e) {
			// DO NOTHING
		}					
	}
	
	@Override
	protected void updateLabels() {
		if (getI18N() != null) {

		}
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// toolbarDriverGraph
		toolbarDriverGraph = new ToolbarDriverGraph();
		toolbarDriverGraph.setImmediate(false);
		toolbarDriverGraph.setWidth("-1px");
		toolbarDriverGraph.setHeight("-1px");
		mainLayout.addComponent(toolbarDriverGraph);
		
		// panel_2
		graphPanel = buildPanel_2();
		mainLayout.addComponent(graphPanel);
		mainLayout.setExpandRatio(graphPanel, 1.0f);
		
		return mainLayout;
	}
	
	@AutoGenerated
	private Panel buildPanel_2() {
		// common part: create layout
		graphPanel = new Panel();
		graphPanel.setImmediate(false);
		graphPanel.setWidth("100.0%");
		graphPanel.setHeight("100.0%");
		
		// verticalLayout_3
		graphLayout = new VerticalLayout();
		graphLayout.setImmediate(false);
		graphLayout.setSpacing(true);
		graphLayout.setWidth("100.0%");
		graphLayout.setHeight("-1px");
		graphLayout.setMargin(false);
		graphPanel.setContent(graphLayout);
		
		return graphPanel;
	}
}
