package com.thingtrack.workbench.view.graph;

import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import ru.xpoft.vaadin.VaadinView;

import com.thingtrack.tachoreader.domain.CardActivityDaily;
import com.thingtrack.tachoreader.domain.CardActivityDailyChange;
import com.thingtrack.tachoreader.domain.Driver;
import com.thingtrack.tachoreader.service.api.CardActivityDailyService;
import com.thingtrack.tachoreader.service.api.DriverService;
import com.thingtrack.workbench.component.AbstractI18NView;
import com.thingtrack.workbench.component.DriverActivityDailyChart;
import com.thingtrack.workbench.component.ToolbarDriverGraph;
import com.thingtrack.workbench.component.ToolbarDriverGraph.ClickDriverActivityQueryListener;
import com.thingtrack.workbench.component.ToolbarDriverGraph.ClickQueryEvent;
import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.model.ChartType;
import com.vaadin.addon.charts.model.Configuration;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.VerticalLayout;

@Component
@Scope("prototype")
@VaadinView(value=GraphView.NAME, cached=true)
public class GraphView extends AbstractI18NView implements View, ClickDriverActivityQueryListener {
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private VerticalLayout graphLayout;

	@AutoGenerated
	private DriverActivityDailyChart driverActivityDailyChart;

	@AutoGenerated
	private ToolbarDriverGraph toolbarDriverGraph;

	private static final long serialVersionUID = 1L;
	public static final String NAME = "graphs";

	@Autowired
	private DriverService driverService;
	
	@Autowired
	private CardActivityDailyService cardActivityDailyService;
		
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public GraphView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here		
		initialize();	
		
		/*Chart chartDriverActivity = new Chart(ChartType.COLUMN);
		chartDriverActivity.setSizeFull();
		Configuration conf = chartDriverActivity.getConfiguration();

        conf.setTitle("Driver Activity");
        conf.setSubTitle("Source: Tachograph registers");
        
        graphLayout.addComponent(chartDriverActivity);*/
	}
	
	private void initialize() {
		// define toolbar events
		toolbarDriverGraph.addClickDriverActivityQueryListener(this);
	}
	
	@Override
    public void enter(ViewChangeEvent event) {
    }

	@PostConstruct
    public void PostConstruct() {        	    	
    }

	@Override
	public void queryDriveActivityClick(ClickQueryEvent event) {
		Driver driverTest;
		try {
			driverTest = driverService.getByCardNumber(event.getDriver().getCardNumber());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;		
		}
		
		/*Calendar cal = Calendar.getInstance();
		cal.set(2013, 4, 19); // 19/05/2013
		Date registerDate = cal.getTime();*/
				
		CardActivityDaily cardActivityDaily = null;		
		try {
			cardActivityDaily = cardActivityDailyService.getCardActivityDailyByDriver(driverTest, event.getRegisterDate());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		}
		
		driverActivityDailyChart.paintGraph(cardActivityDaily.getCardActivityDailyChanges());		
	}
	
	@Override
	protected void updateLabels() {
		if (getI18N() != null) {

		}
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// toolbarDriverGraph
		toolbarDriverGraph = new ToolbarDriverGraph();
		toolbarDriverGraph.setImmediate(false);
		toolbarDriverGraph.setWidth("-1px");
		toolbarDriverGraph.setHeight("-1px");
		mainLayout.addComponent(toolbarDriverGraph);
		
		// graphLayout
		graphLayout = buildGraphLayout();
		mainLayout.addComponent(graphLayout);
		mainLayout.setExpandRatio(graphLayout, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildGraphLayout() {
		// common part: create layout
		graphLayout = new VerticalLayout();
		graphLayout.setImmediate(false);
		graphLayout.setWidth("100.0%");
		graphLayout.setHeight("100.0%");
		graphLayout.setMargin(false);
		
		// driverActivityDailyChart
		driverActivityDailyChart = new DriverActivityDailyChart();
		driverActivityDailyChart.setImmediate(false);
		driverActivityDailyChart.setWidth("100.0%");
		driverActivityDailyChart.setHeight("100.0%");
		graphLayout.addComponent(driverActivityDailyChart);
		graphLayout.setExpandRatio(driverActivityDailyChart, 1.0f);
		
		return graphLayout;
	}
}
