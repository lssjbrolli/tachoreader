package com.thingtrack.workbench.view;

import java.io.File;
import java.util.Locale;

import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.tacografo.file.exception.ExceptionDriverNotExist;
import org.tacografo.file.exception.ExceptionFileExist;

import pl.exsio.plupload.Plupload;
import pl.exsio.plupload.PluploadError;
import pl.exsio.plupload.PluploadFile;
import pl.exsio.plupload.helper.filter.PluploadFilter;

import com.google.common.eventbus.Subscribe;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.validator.EmailValidator;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Page;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Link;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;
import com.vaadin.ui.TabSheet.SelectedTabChangeListener;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;
import com.thingtrack.tachoreader.domain.User;
import com.thingtrack.tachoreader.service.api.AdministratorService;
import com.thingtrack.tachoreader.service.api.TachoService;
import com.thingtrack.workbench.WorkbenchUI;
import com.thingtrack.workbench.component.AbstractI18NCustomComponent;
import com.thingtrack.workbench.component.Broadcaster;
import com.thingtrack.workbench.component.NotificationHelper;
import com.thingtrack.workbench.event.DashboardEvent.UserLoginRequestedEvent;
import com.thingtrack.workbench.event.DashboardEvent.UserResetRequestedEvent;
import com.thingtrack.workbench.event.DashboardEvent.UserLoginRequestedEventException;
import com.thingtrack.workbench.event.DashboardEventBus;

@SuppressWarnings("serial")
public class LoginView extends AbstractI18NCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout logoLayout;
	@AutoGenerated
	private Embedded logoEmbedded;
	@AutoGenerated
	private VerticalLayout separatorLayout;
	@AutoGenerated
	private TabSheet tachoTabSheet;
	@AutoGenerated
	private VerticalLayout tachoLayout;
	@AutoGenerated
	private HorizontalLayout separatorLayout01;
	@AutoGenerated
	private Plupload tachoButton;
	@AutoGenerated
	private PasswordField tachoPasswordField;
	@AutoGenerated
	private TextField tachoUsernameField;
	@AutoGenerated
	private VerticalLayout registerLayout;
	@AutoGenerated
	private HorizontalLayout separatorLayout02;
	@AutoGenerated
	private Button registerButton;
	@AutoGenerated
	private HorizontalLayout conditionslLayout;
	@AutoGenerated
	private Link conditionsLink;
	@AutoGenerated
	private CheckBox conditionsField;
	@AutoGenerated
	private PasswordField registerPasswordField;
	@AutoGenerated
	private TextField registerEmailField;
	@AutoGenerated
	private TextField registerSurnameField;
	@AutoGenerated
	private TextField registerNameField;
	@AutoGenerated
	private HorizontalLayout companyLayout;
	@AutoGenerated
	private TextField registerCompanyNameField;
	@AutoGenerated
	private TextField registerCompanyCodeField;
	@AutoGenerated
	private VerticalLayout logonLayout;
	@AutoGenerated
	private HorizontalLayout buttonLayout;
	@AutoGenerated
	private Button btnReset;
	@AutoGenerated
	private Button btnLogin;
	@AutoGenerated
	private CheckBox rememberField;
	@AutoGenerated
	private PasswordField loginPasswordField;
	@AutoGenerated
	private TextField loginEmailField;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	private String tachoRepository;
	
	private AdministratorService administratorService;
	private TachoService tachoService;	
	
	private static final int TAB_ADMIN = 0;
	private static final int TAB_REGISTER = 1;
	private static final int TAB_TACHOS = 2;
	
	private boolean errorTachoValidation = false;
	
	public LoginView(String usernameRememberMe, String passwordRememberMe) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// register this class in the event bus
		DashboardEventBus.register(this);
				
		// get Spring configuration
		getServices();
		
		conditionsLink.addStyleName("condition-link");
		
		// configure view style and font icons		
		loginEmailField.setNullSettingAllowed(false);
		loginEmailField.setNullRepresentation("");
		loginEmailField.setImmediate(false);
		loginEmailField.setValidationVisible(true);
		loginEmailField.addValidator(new EmailValidator("Set a correct email"));		
		loginPasswordField.setNullSettingAllowed(false);
		loginPasswordField.setNullRepresentation("");
		loginPasswordField.setImmediate(false);		
		loginPasswordField.setValidationVisible(true);
		
		registerCompanyCodeField.setNullSettingAllowed(false);
		registerCompanyCodeField.setNullRepresentation("");
		registerCompanyCodeField.setImmediate(false);
		registerCompanyCodeField.setValidationVisible(true);
		registerCompanyNameField.setNullSettingAllowed(false);
		registerCompanyNameField.setNullRepresentation("");
		registerCompanyNameField.setImmediate(false);
		registerCompanyNameField.setValidationVisible(true);
		registerEmailField.setNullSettingAllowed(true);
		registerEmailField.setNullRepresentation("");
		registerEmailField.setImmediate(false);
		registerEmailField.setValidationVisible(true);
		registerEmailField.addValidator(new EmailValidator("Set a correct email"));
		registerNameField.setNullSettingAllowed(true);
		registerNameField.setNullRepresentation("");
		registerNameField.setImmediate(false);
		registerNameField.setValidationVisible(true);
		registerSurnameField.setNullSettingAllowed(true);
		registerSurnameField.setNullRepresentation("");
		registerSurnameField.setImmediate(false);
		registerSurnameField.setValidationVisible(true);
		registerPasswordField.setNullSettingAllowed(true);
		registerPasswordField.setNullRepresentation("");
		registerPasswordField.setImmediate(false);
		registerPasswordField.setValidationVisible(true);	
		
		tachoUsernameField.setNullSettingAllowed(false);
		tachoUsernameField.setNullRepresentation("");
		tachoUsernameField.setImmediate(true);
		tachoUsernameField.setValidationVisible(true);
		tachoPasswordField.setNullSettingAllowed(false);
		tachoPasswordField.setNullRepresentation("");
		tachoPasswordField.setImmediate(true);
		tachoPasswordField.setValidationVisible(true);
								
		loginEmailField.addStyleName("inline-icon");
		loginEmailField.setIcon(FontAwesome.ENVELOPE);
		loginPasswordField.addStyleName("inline-icon");
		loginPasswordField.setIcon(FontAwesome.LOCK);		
		
		registerCompanyCodeField.addStyleName("inline-icon");
		registerCompanyCodeField.setIcon(FontAwesome.BUILDING);
		registerCompanyNameField.addStyleName("inline-icon");
		registerCompanyNameField.setIcon(FontAwesome.BUILDING);		
		registerEmailField.addStyleName("inline-icon");
		registerEmailField.setIcon(FontAwesome.ENVELOPE);		
		registerPasswordField.addStyleName("inline-icon");
		registerPasswordField.setIcon(FontAwesome.LOCK);
		registerNameField.addStyleName("inline-icon");
		registerNameField.setIcon(FontAwesome.USER);
		registerSurnameField.addStyleName("inline-icon");
		registerSurnameField.setIcon(FontAwesome.USER);		
		
		tachoUsernameField.addStyleName("inline-icon");
		tachoUsernameField.setIcon(FontAwesome.HAND_O_RIGHT);		
		tachoPasswordField.addStyleName("inline-icon");
		tachoPasswordField.setIcon(FontAwesome.LOCK);			
				
		loginEmailField.focus();
		
		tachoTabSheet.addStyleName(ValoTheme.TABSHEET_ICONS_ON_TOP);		
		tachoTabSheet.addStyleName(ValoTheme.TABSHEET_FRAMED);
				
		btnLogin.addStyleName("primary");		
		btnLogin.setClickShortcut(KeyCode.ENTER, null);
		btnLogin.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(final ClickEvent event) {
            	boolean errorValidation = false;
            	
            	// check validation form
            	if (!loginEmailField.isValid()) {       
            		loginEmailField.setRequiredError("The email is required");
            		errorValidation = true;
            	} else
            		loginEmailField.setRequiredError(null);
            	
            	if (!loginPasswordField.isValid()) {
            		loginPasswordField.setRequiredError("The password is required");
            		errorValidation = true;
            	}
            	else
            		loginPasswordField.setRequiredError(null);
            	
            	if (errorValidation)
            		return;
            	
            	DashboardEventBus.post(new UserLoginRequestedEvent(loginEmailField.getValue(), loginPasswordField.getValue(), rememberField.getValue()));            	
            }
        });
		
		btnReset.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(final ClickEvent event) {
            	loginEmailField.setValue(null);
            	loginPasswordField.setValue(null);
            	
            	DashboardEventBus.post(new UserResetRequestedEvent(rememberField.getValue()));
            	
            }
		});
		
		registerButton.addStyleName("friendly");
		registerButton.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(final ClickEvent event) {            	            	
            	if (!conditionsField.getValue()) {
					NotificationHelper.sendWarningNotification("Register View", "You must acept the TachoReader conditions");
            		return;           		
            	} 
            	
            	boolean errorValidation = false;
            	
            	// check validation form
            	if (!registerCompanyCodeField.isValid()) {       
            		registerCompanyCodeField.setRequiredError("The company VAT is required");            		
            		errorValidation = true;
            	} else
            		registerCompanyCodeField.setRequiredError(null);

            	if (!registerCompanyNameField.isValid()) {       
            		registerCompanyNameField.setRequiredError("The company name is required");            		
            		errorValidation = true;
            	} else
            		registerCompanyNameField.setRequiredError(null);
            	
            	if (!registerNameField.isValid()) {
            		registerNameField.setRequiredError("The name is required");
            		errorValidation = true;
            	}
            	else
            		registerNameField.setRequiredError(null);
            	
            	if (!registerSurnameField.isValid()) {
            		registerSurnameField.setRequiredError("The surname is required");
            		errorValidation = true;
            	}
            	else
            		registerSurnameField.setRequiredError(null);
            	
            	if (!registerEmailField.isValid()) {
            		registerEmailField.setRequiredError("The email is required");
            		errorValidation = true;
            	}
            	else
            		registerEmailField.setRequiredError(null);
            	
            	if (!registerPasswordField.isValid()) {
            		registerPasswordField.setRequiredError("The password is required");
            		errorValidation = true;
            	}
            	else
            		registerPasswordField.setRequiredError(null);
            	
            	if (errorValidation)
            		return;
            	
            	Locale webBrowserLocale = Page.getCurrent().getWebBrowser().getLocale();
            	
            	// set default locale from browser configuration
            	String language;
        		if (webBrowserLocale.toString().contains("es"))
        			language = User.LANGUAGE.Español.getValue();
        		else if (webBrowserLocale.toString().contains("en"))
        			language = User.LANGUAGE.English.getValue();
        		else if (webBrowserLocale.toString().contains("fr"))
        			language = User.LANGUAGE.Français.getValue();
        		else
        			language = User.LANGUAGE.Español.getValue();
        		
            	try {
                	administratorService.setRegisterAgent(registerCompanyCodeField.getValue(), 
		                							      registerCompanyNameField.getValue(), 
		                							      registerNameField.getValue(),
		                							      registerSurnameField.getValue(),
		                							      registerEmailField.getValue(), 
		                							      registerPasswordField.getValue(),
		                							      language);
                	
                	DashboardEventBus.post(new UserLoginRequestedEvent(registerEmailField.getValue(), registerPasswordField.getValue(), rememberField.getValue()));
				} catch (Exception e) {
					NotificationHelper.sendErrorNotification("Register View", e.getMessage());
				}
            }
        });
		
		//show notification after file is uploaded		
		tachoButton.addStyleName("danger");
		tachoButton.setMultiSelection(true);
		//tachoButton.setPreventDuplicates(true);
		tachoButton.addFilter(new PluploadFilter("Tachograph files", "ddd,tgd,crd,esm,dc,tdc"));		
		tachoButton.addFileUploadedListener(new Plupload.FileUploadedListener() {
		       @Override
		       public void onFileUploaded(PluploadFile file) {
		    	   // Broadcast the message
		           //Broadcaster.broadcast(file.getName());
		           
		    	   // check validation form
	               if (!tachoUsernameField.isValid()) {
	            		tachoUsernameField.setRequiredError("The driver code is required");
	            		errorTachoValidation = true;
	               }
	               else {
	            	   	errorTachoValidation = false;
	            		tachoUsernameField.setRequiredError(null);
	               }

	               if (!tachoPasswordField.isValid()) {
	            		tachoPasswordField.setRequiredError("The driver password is required");
	            		errorTachoValidation = true;
	               }
	               else {
	            	   errorTachoValidation = false;
	            	   tachoPasswordField.setRequiredError(null);
	               }	            		
	            	
	            	if (errorTachoValidation)
	            		return;
	            	
		    	   try {			    	   	 
			    	   	tachoService.setRegisterTacho(tachoUsernameField.getValue(), 
			    	   								  tachoPasswordField.getValue(), 
			    	   								  (File)file.getUploadedFile(), 
			    	   								  file.getName(),
			    	   								  tachoRepository);			    	   				    	   
						
							NotificationHelper.sendInformationNotification("Tacho View", "I've just uploaded tacho file: " + file.getName());
					} catch (ExceptionDriverNotExist e) {	
						errorTachoValidation = true;
						
						tachoUsernameField.setValue(null);
						tachoPasswordField.setValue(null);
						
						NotificationHelper.sendErrorNotification("Tacho View", "There is no driver with this identification card " + e.getCardNumber() + " registered");					
					} catch (ExceptionFileExist e) {	
						errorTachoValidation = true;
						
						tachoUsernameField.setValue(null);
						tachoPasswordField.setValue(null);
						
						NotificationHelper.sendErrorNotification("Tacho View", "The tacho " + e.getFileName() + " has already been registered");					
					} catch (Exception e) {
						errorTachoValidation = true;
						
						tachoUsernameField.setValue(null);
						tachoPasswordField.setValue(null);
						
						NotificationHelper.sendErrorNotification("Tacho View", e.getMessage());					
					}		    	   	
		       }
		});
		
		//update upload progress
		tachoButton.addUploadProgressListener(new Plupload.UploadProgressListener() {
		       @Override
		       public void onUploadProgress(PluploadFile file) {
		             //info.setValue("I'm uploading "+file.getName() +"and I'm at "+file.getPercent()+"%");
		       }
		});
		
		//autostart the uploader after addind files
		tachoButton.addFilesAddedListener(new Plupload.FilesAddedListener() {
		    @Override
		    public void onFilesAdded(PluploadFile[] files) {
		    	tachoButton.start();
		    }
		});
		
		//notify, when the upload process is completed
		tachoButton.addUploadCompleteListener(new Plupload.UploadCompleteListener() {
			@Override
		    public void onUploadComplete() {
				if (!errorTachoValidation) {
					tachoUsernameField.setValue(null);
			    	tachoPasswordField.setValue(null);
			    	
			    	NotificationHelper.sendInformationNotification("Tacho View", "upload is completed!");
				}
		    }
		});
		
		//handle errors
		tachoButton.addErrorListener(new Plupload.ErrorListener() {
		       @Override
		       public void onError(PluploadError error) {
		    	   NotificationHelper.sendErrorNotification("Tacho View", error.getMessage());
		       }
		});
				
		tachoTabSheet.addSelectedTabChangeListener(new SelectedTabChangeListener() {			
			@Override
			public void selectedTabChange(SelectedTabChangeEvent event) {
				if (event.getTabSheet().getSelectedTab().equals(logonLayout)) {
					if (!rememberField.getValue()) {
						loginEmailField.setValue(null);
						loginPasswordField.setValue(null);
						rememberField.setValue(false);
					}
					
					loginEmailField.focus();
					
					btnLogin.setClickShortcut(KeyCode.ENTER, null);
					registerButton.removeClickShortcut();
				}
				else if (event.getTabSheet().getSelectedTab().equals(registerLayout)) {
					registerCompanyCodeField.setValue(null);
					registerCompanyNameField.setValue(null);
					registerEmailField.setValue(null);
					registerNameField.setValue(null);
					registerSurnameField.setValue(null);
					registerPasswordField.setValue(null);
					conditionsField.setValue(false);
					
					registerCompanyCodeField.focus();
					
					btnLogin.removeClickShortcut();
					registerButton.setClickShortcut(KeyCode.ENTER, null);
				}
				else if (event.getTabSheet().getSelectedTab().equals(tachoLayout)) {
					tachoUsernameField.setValue(null);
					tachoPasswordField.setValue(null);
					
					tachoUsernameField.focus();
				}
			}
		});
		
		// set Remember me
		if (usernameRememberMe != null && passwordRememberMe != null) {
			loginEmailField.setValue(usernameRememberMe);
			loginPasswordField.setValue(passwordRememberMe);
			rememberField.setValue(true);
		}
		else
		{
			loginEmailField.setValue(null);
			loginPasswordField.setValue(null);
			rememberField.setValue(false);
		}
		
		// set default tab
		tachoTabSheet.setSelectedTab(TAB_TACHOS);
	}

	@Subscribe
    public void userLoginRequested(final UserLoginRequestedEventException exception) throws Exception {
		NotificationHelper.sendErrorNotification("Login View", "Bad credentials");
        
		loginEmailField.setValue(null);
		loginPasswordField.setValue(null);
	}

	private void getServices() {
		PropertySourcesPlaceholderConfigurer appConfig = (PropertySourcesPlaceholderConfigurer) WorkbenchUI.getCurrent().getApplicationContext().getBean("appConfig");
		administratorService = (AdministratorService) WorkbenchUI.getCurrent().getApplicationContext().getBean("administratorService");
		tachoService = (TachoService) WorkbenchUI.getCurrent().getApplicationContext().getBean("tachoService");
		
		// get Tacho Repository configuration 
		if (appConfig != null)
			tachoRepository = appConfig.getAppliedPropertySources().get("localProperties").getProperty("tacho.repository").toString();
		
	}
	
	@Override
	protected void updateLabels() {
		tachoTabSheet.getTab(logonLayout).setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.tachoTabSheet.logonLayout.caption"));
		tachoTabSheet.getTab(registerLayout).setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.tachoTabSheet.registerLayout.caption"));
		tachoTabSheet.getTab(tachoLayout).setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.tachoTabSheet.tachoLayout.caption"));
		
		loginEmailField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.loginEmailField.caption"));
		loginPasswordField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.loginPasswordField.caption"));
		btnLogin.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.btnLogin.caption"));
		btnReset.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.btnReset.caption"));
		rememberField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.rememberField.caption"));
		registerCompanyCodeField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.registerCompanyCodeField.caption"));
		registerCompanyNameField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.registerCompanyNameField.caption"));
		registerNameField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.registerNameField.caption"));
		registerSurnameField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.registerSurnameField.caption"));
		registerEmailField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.registerEmailField.caption"));
		registerPasswordField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.registerPasswordField.caption"));
		conditionsField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.conditionsField.caption"));
		conditionsLink.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.conditionsLink.caption"));
		registerButton.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.registerButton.caption"));
		tachoUsernameField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.tachoUsernameField.caption"));
		tachoPasswordField.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.tachoPasswordField.caption"));
		tachoButton.setCaption(getI18N().getMessage("com.thingtrack.workbench.view.LoginView.tachoButton.caption"));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// logoLayout
		logoLayout = buildLogoLayout();
		mainLayout.addComponent(logoLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildLogoLayout() {
		// common part: create layout
		logoLayout = new HorizontalLayout();
		logoLayout.setImmediate(false);
		logoLayout.setWidth("100.0%");
		logoLayout.setHeight("100.0%");
		logoLayout.setMargin(false);
		logoLayout.setSpacing(true);
		
		// verticalLayout_2
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("200px");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		logoLayout.addComponent(verticalLayout_2);
		
		// tachoTabSheet
		tachoTabSheet = buildTachoTabSheet();
		logoLayout.addComponent(tachoTabSheet);
		
		// separatorLayout
		separatorLayout = new VerticalLayout();
		separatorLayout.setImmediate(false);
		separatorLayout.setWidth("50px");
		separatorLayout.setHeight("100.0%");
		separatorLayout.setMargin(false);
		logoLayout.addComponent(separatorLayout);
		
		// logoEmbedded
		logoEmbedded = new Embedded();
		logoEmbedded.setImmediate(false);
		logoEmbedded.setWidth("-1px");
		logoEmbedded.setHeight("-1px");
		logoEmbedded.setSource(new ThemeResource("img/logo.png"));
		logoEmbedded.setType(1);
		logoEmbedded.setMimeType("image/png");
		logoLayout.addComponent(logoEmbedded);
		logoLayout.setExpandRatio(logoEmbedded, 1.0f);
		logoLayout.setComponentAlignment(logoEmbedded, new Alignment(34));
		
		return logoLayout;
	}

	@AutoGenerated
	private TabSheet buildTachoTabSheet() {
		// common part: create layout
		tachoTabSheet = new TabSheet();
		tachoTabSheet.setImmediate(true);
		tachoTabSheet.setWidth("450px");
		tachoTabSheet.setHeight("-1px");
		
		// logonLayout
		logonLayout = buildLogonLayout();
		tachoTabSheet.addTab(logonLayout, "Log in", null);
		
		// registerLayout
		registerLayout = buildRegisterLayout();
		tachoTabSheet.addTab(registerLayout, "Sign up", null);
		
		// tachoLayout
		tachoLayout = buildTachoLayout();
		tachoTabSheet.addTab(tachoLayout, "Send Tachos", null);
		
		return tachoTabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildLogonLayout() {
		// common part: create layout
		logonLayout = new VerticalLayout();
		logonLayout.setImmediate(false);
		logonLayout.setWidth("100.0%");
		logonLayout.setHeight("-1px");
		logonLayout.setMargin(true);
		logonLayout.setSpacing(true);
		
		// loginEmailField
		loginEmailField = new TextField();
		loginEmailField.setCaption("Email");
		loginEmailField.setImmediate(false);
		loginEmailField.setWidth("250px");
		loginEmailField.setHeight("-1px");
		loginEmailField.setRequired(true);
		logonLayout.addComponent(loginEmailField);
		
		// loginPasswordField
		loginPasswordField = new PasswordField();
		loginPasswordField.setCaption("Password");
		loginPasswordField.setImmediate(false);
		loginPasswordField.setWidth("250px");
		loginPasswordField.setHeight("-1px");
		loginPasswordField.setRequired(true);
		logonLayout.addComponent(loginPasswordField);
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		logonLayout.addComponent(buttonLayout);
		logonLayout.setExpandRatio(buttonLayout, 1.0f);
		logonLayout.setComponentAlignment(buttonLayout, new Alignment(9));
		
		return logonLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("100.0%");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);
		
		// rememberField
		rememberField = new CheckBox();
		rememberField.setCaption("Remember me");
		rememberField.setImmediate(false);
		rememberField.setWidth("-1px");
		rememberField.setHeight("-1px");
		buttonLayout.addComponent(rememberField);
		buttonLayout.setComponentAlignment(rememberField, new Alignment(10));
		
		// loginButton
		btnLogin = new Button();
		btnLogin.setCaption("Sign In");
		btnLogin.setImmediate(true);
		btnLogin.setWidth("-1px");
		btnLogin.setHeight("-1px");
		buttonLayout.addComponent(btnLogin);
		buttonLayout.setExpandRatio(btnLogin, 1.0f);
		buttonLayout.setComponentAlignment(btnLogin, new Alignment(6));
		
		// btnReset
		btnReset = new Button();
		btnReset.setCaption("Reset");
		btnReset.setImmediate(false);
		btnReset.setWidth("-1px");
		btnReset.setHeight("-1px");
		buttonLayout.addComponent(btnReset);
		
		return buttonLayout;
	}

	@AutoGenerated
	private VerticalLayout buildRegisterLayout() {
		// common part: create layout
		registerLayout = new VerticalLayout();
		registerLayout.setImmediate(false);
		registerLayout.setWidth("100.0%");
		registerLayout.setHeight("-1px");
		registerLayout.setMargin(true);
		registerLayout.setSpacing(true);
		
		// companyLayout
		companyLayout = buildCompanyLayout();
		registerLayout.addComponent(companyLayout);
		
		// registerNameField
		registerNameField = new TextField();
		registerNameField.setCaption("Name");
		registerNameField.setImmediate(false);
		registerNameField.setWidth("200px");
		registerNameField.setHeight("-1px");
		registerNameField.setRequired(true);
		registerLayout.addComponent(registerNameField);
		
		// registerSurnameField
		registerSurnameField = new TextField();
		registerSurnameField.setCaption("Surname");
		registerSurnameField.setImmediate(false);
		registerSurnameField.setWidth("200px");
		registerSurnameField.setHeight("-1px");
		registerSurnameField.setRequired(true);
		registerLayout.addComponent(registerSurnameField);
		
		// registerEmailField
		registerEmailField = new TextField();
		registerEmailField.setCaption("Email");
		registerEmailField.setImmediate(false);
		registerEmailField.setWidth("300px");
		registerEmailField.setHeight("-1px");
		registerEmailField.setRequired(true);
		registerLayout.addComponent(registerEmailField);
		
		// registerPasswordField
		registerPasswordField = new PasswordField();
		registerPasswordField.setCaption("Password");
		registerPasswordField.setImmediate(false);
		registerPasswordField.setWidth("200px");
		registerPasswordField.setHeight("-1px");
		registerPasswordField.setRequired(true);
		registerLayout.addComponent(registerPasswordField);
		
		// conditionslLayout
		conditionslLayout = buildConditionslLayout();
		registerLayout.addComponent(conditionslLayout);
		
		// separatorLayout02
		separatorLayout02 = buildSeparatorLayout02();
		registerLayout.addComponent(separatorLayout02);
		registerLayout.setExpandRatio(separatorLayout02, 1.0f);
		registerLayout.setComponentAlignment(separatorLayout02,
				new Alignment(9));
		
		return registerLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildCompanyLayout() {
		// common part: create layout
		companyLayout = new HorizontalLayout();
		companyLayout.setImmediate(false);
		companyLayout.setWidth("400px");
		companyLayout.setHeight("-1px");
		companyLayout.setMargin(false);
		companyLayout.setSpacing(true);
		
		// registerCompanyCodeField
		registerCompanyCodeField = new TextField();
		registerCompanyCodeField.setCaption("Company VAT");
		registerCompanyCodeField.setImmediate(false);
		registerCompanyCodeField.setWidth("140px");
		registerCompanyCodeField.setHeight("-1px");
		registerCompanyCodeField.setRequired(true);
		companyLayout.addComponent(registerCompanyCodeField);
		
		// registerCompanyNameField
		registerCompanyNameField = new TextField();
		registerCompanyNameField.setCaption("Company Name");
		registerCompanyNameField.setImmediate(false);
		registerCompanyNameField.setWidth("100.0%");
		registerCompanyNameField.setHeight("-1px");
		registerCompanyNameField.setRequired(true);
		companyLayout.addComponent(registerCompanyNameField);
		companyLayout.setExpandRatio(registerCompanyNameField, 1.0f);
		
		return companyLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildConditionslLayout() {
		// common part: create layout
		conditionslLayout = new HorizontalLayout();
		conditionslLayout.setImmediate(false);
		conditionslLayout.setWidth("-1px");
		conditionslLayout.setHeight("-1px");
		conditionslLayout.setMargin(false);
		
		// conditionsField
		conditionsField = new CheckBox();
		conditionsField.setCaption("CheckBox");
		conditionsField.setImmediate(false);
		conditionsField.setWidth("-1px");
		conditionsField.setHeight("-1px");
		conditionslLayout.addComponent(conditionsField);
		
		// conditionsLink
		conditionsLink = new Link();
		conditionsLink.setCaption("Acept the TachoReader Conditions");
		conditionsLink.setImmediate(false);
		conditionsLink.setWidth("-1px");
		conditionsLink.setHeight("-1px");
		conditionslLayout.addComponent(conditionsLink);
		
		return conditionslLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildSeparatorLayout02() {
		// common part: create layout
		separatorLayout02 = new HorizontalLayout();
		separatorLayout02.setImmediate(false);
		separatorLayout02.setWidth("100.0%");
		separatorLayout02.setHeight("-1px");
		separatorLayout02.setMargin(false);
		
		// registerButton
		registerButton = new Button();
		registerButton.setCaption("Sign In");
		registerButton.setImmediate(true);
		registerButton.setWidth("-1px");
		registerButton.setHeight("-1px");
		separatorLayout02.addComponent(registerButton);
		separatorLayout02.setComponentAlignment(registerButton,
				new Alignment(6));
		
		return separatorLayout02;
	}

	@AutoGenerated
	private VerticalLayout buildTachoLayout() {
		// common part: create layout
		tachoLayout = new VerticalLayout();
		tachoLayout.setImmediate(false);
		tachoLayout.setWidth("100.0%");
		tachoLayout.setHeight("-1px");
		tachoLayout.setMargin(true);
		tachoLayout.setSpacing(true);
		
		// tachoUsernameField
		tachoUsernameField = new TextField();
		tachoUsernameField.setCaption("Username");
		tachoUsernameField.setImmediate(false);
		tachoUsernameField.setWidth("250px");
		tachoUsernameField.setHeight("-1px");
		tachoUsernameField.setRequired(true);
		tachoLayout.addComponent(tachoUsernameField);
		
		// tachoPasswordField
		tachoPasswordField = new PasswordField();
		tachoPasswordField.setCaption("Password");
		tachoPasswordField.setImmediate(false);
		tachoPasswordField.setWidth("250px");
		tachoPasswordField.setHeight("-1px");
		tachoPasswordField.setRequired(true);
		tachoLayout.addComponent(tachoPasswordField);
		
		// separatorLayout01
		separatorLayout01 = buildSeparatorLayout01();
		tachoLayout.addComponent(separatorLayout01);
		tachoLayout.setExpandRatio(separatorLayout01, 1.0f);
		
		return tachoLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildSeparatorLayout01() {
		// common part: create layout
		separatorLayout01 = new HorizontalLayout();
		separatorLayout01.setImmediate(false);
		separatorLayout01.setWidth("100.0%");
		separatorLayout01.setHeight("-1px");
		separatorLayout01.setMargin(false);
		
		// tachoButton
		tachoButton = new Plupload();
		tachoButton.setCaption("Add your Tacho");
		tachoButton.setImmediate(true);
		tachoButton.setWidth("-1px");
		tachoButton.setHeight("-1px");
		separatorLayout01.addComponent(tachoButton);
		
		return separatorLayout01;
	}
}
