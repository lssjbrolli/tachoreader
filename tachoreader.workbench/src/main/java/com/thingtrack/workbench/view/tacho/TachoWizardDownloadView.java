package com.thingtrack.workbench.view.tacho;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.vaadin.teemu.wizards.Wizard;
import org.vaadin.teemu.wizards.event.WizardCancelledEvent;
import org.vaadin.teemu.wizards.event.WizardCompletedEvent;
import org.vaadin.teemu.wizards.event.WizardProgressListener;
import org.vaadin.teemu.wizards.event.WizardStepActivationEvent;
import org.vaadin.teemu.wizards.event.WizardStepSetChangedEvent;

import ru.xpoft.vaadin.VaadinView;

import com.thingtrack.tachoreader.domain.TachoDriver;
import com.thingtrack.tachoreader.domain.TachoVehicle;
import com.thingtrack.tachoreader.service.api.TachoDriverService;
import com.thingtrack.tachoreader.service.api.TachoVehicleService;
import com.thingtrack.workbench.WorkbenchUI;
import com.thingtrack.workbench.component.AbstractI18NView;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Notification.Type;

@Component
@Scope("prototype")
@VaadinView(value=TachoWizardDownloadView.NAME, cached=true)
public class TachoWizardDownloadView extends AbstractI18NView implements View {
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Wizard tachoWizard;

	private static final long serialVersionUID = 1L;
	public static final String NAME = "tachos_download";
		
	private final static String WIZARD_FILTER_ID = "FilterId";
	private final static String WIZARD_DRIVER_ID = "DriverId";
	private final static String WIZARD_RESULT_ID = "ResultId";
	
	private WizardStepFilter wizardStepFilter = new WizardStepFilter();
	private WizardStepDriver wizardStepDriver = new WizardStepDriver();
	private WizardStepResult wizardStepResult = new WizardStepResult();
	
	private TachoDriverService tachoDriverService; 
	private TachoVehicleService tachoVehicleService;
	
	List<TachoDriver> tachosDriver = new ArrayList<TachoDriver>();
	List<TachoVehicle> tachosVehicle = new ArrayList<TachoVehicle>();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @throws Exception 
	 */
	public TachoWizardDownloadView() throws Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		initialize();
		
		getServices();
		
		tachoWizard.addStep(wizardStepFilter, WIZARD_FILTER_ID);
		tachoWizard.addStep(wizardStepDriver, WIZARD_DRIVER_ID);
		tachoWizard.addStep(wizardStepResult, WIZARD_RESULT_ID);
		
		tachoWizard.addListener(new WizardProgressListener() {			
			@Override
			public void wizardCompleted(WizardCompletedEvent event) {				
				VerticalLayout component = (VerticalLayout) getParent();
				component.removeAllComponents();
				
				Notification.show("Wizard finished!");
			}
			
			@Override
			public void wizardCancelled(WizardCancelledEvent event) {
				VerticalLayout component = (VerticalLayout) getParent();
				component.removeAllComponents();
				
				Notification.show("Wizard cancelled!");
				
			}
			
			@Override
			public void stepSetChanged(WizardStepSetChangedEvent event) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void activeStepChanged(WizardStepActivationEvent event) {		
				if (event.getActivatedStep().getContent() instanceof WizardStepDriver) {
					try {
						// get all tachos driver 						
						tachosDriver = tachoDriverService.getAll(wizardStepFilter.getVehicles(), 
								                                 wizardStepFilter.getStartActivityDate(), 
								                                 wizardStepFilter.getEndActivityDate());
						// get all tachos vehicle
						tachosVehicle = tachoVehicleService.getAll(wizardStepFilter.getVehicles(), 
									                               wizardStepFilter.getStartActivityDate(), 
									                               wizardStepFilter.getEndActivityDate());
						
						// show driver result
						tachosDriver = wizardStepDriver.loadDatasource(tachosDriver);
						
						
					} catch (Exception e) {
						Notification.show("Error Loading Tachos", e.getMessage(), Type.ERROR_MESSAGE);
					}
				}
								
				if (event.getActivatedStep().getContent() instanceof WizardStepResult) {
					try {
						// show driver/vehicle result
						wizardStepResult.loadDatasource(tachosDriver, tachosVehicle);
					} catch (Exception e) {
						Notification.show("Error Loading Tachos", e.getMessage(), Type.ERROR_MESSAGE);
					}
				}
			}
		});
	}
	
	private void getServices() {
		this.tachoDriverService = (TachoDriverService) WorkbenchUI.getCurrent().getApplicationContext().getBean("tachoDriverService");
		this.tachoVehicleService = (TachoVehicleService) WorkbenchUI.getCurrent().getApplicationContext().getBean("tachoVehicleService");
	}
	
	private void initialize() throws Exception {
	
	}
	
	@Override
    public void enter(ViewChangeEvent event) {
    }
	
	@PostConstruct
    public void PostConstruct() {        	
    	
    }

	@Override
	protected void updateLabels() {
		if (getI18N() != null) {
			
		}
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// tachoWizard
		tachoWizard = new Wizard();
		tachoWizard.setImmediate(false);
		tachoWizard.setWidth("100.0%");
		tachoWizard.setHeight("100.0%");
		mainLayout.addComponent(tachoWizard);
		mainLayout.setExpandRatio(tachoWizard, 1.0f);
		
		return mainLayout;
	}
}
