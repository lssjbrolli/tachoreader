package com.thingtrack.workbench.view.tacho;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import org.vaadin.teemu.wizards.WizardStep;

import com.thingtrack.tachoreader.domain.Vehicle;
import com.thingtrack.tachoreader.service.api.VehicleService;
import com.thingtrack.workbench.WorkbenchUI;
import com.thingtrack.workbench.component.AbstractI18NCustomComponent;
import com.thingtrack.workbench.component.DateFilter;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.server.FontAwesome;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TwinColSelect;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class WizardStepFilter extends AbstractI18NCustomComponent implements WizardStep {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout filterToolbarLayout;
	@AutoGenerated
	private DateFilter dateFilter;
	@AutoGenerated
	private TwinColSelect vehicleTwinColSelector;
	@AutoGenerated
	private Panel pnHelpStepTachoFilter;
	@AutoGenerated
	private VerticalLayout helpTachoFilterLayout;
	@AutoGenerated
	private Label lblHelpTachoFilterStep;
	
	private BeanItemContainer<Vehicle> vehicleContainer = new BeanItemContainer<Vehicle>(Vehicle.class);
	
	private VehicleService vehicleService;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public WizardStepFilter() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		pnHelpStepTachoFilter.setCaption("Help Upload your Tachos");
		pnHelpStepTachoFilter.setIcon(FontAwesome.INFO_CIRCLE);
		pnHelpStepTachoFilter.addStyleName("color3");	
		
		StringBuffer helpTachosUpload = new StringBuffer("Desde esta pantalla usted podrá escojer los filtros para seleccionar los ficheros de tacógrafo y/o tarjeta. ");
		helpTachosUpload.append("Para comenzar pulse el botón \"Siguiente\".");
				
		lblHelpTachoFilterStep.setContentMode(ContentMode.HTML);
		lblHelpTachoFilterStep.setValue(helpTachosUpload.toString());
		
		getServices();
		
		loadDatasource();
	}

	private void getServices() {
		this.vehicleService = (VehicleService) WorkbenchUI.getCurrent().getApplicationContext().getBean("vehicleService");
	}
	
	private void loadDatasource() {
		try {
			vehicleContainer.addAll(vehicleService.getAll(WorkbenchUI.getCurrent().getUser().getOrganizationDefault()));
			
			vehicleTwinColSelector.setContainerDataSource(vehicleContainer);
			vehicleTwinColSelector.setItemCaptionMode(ItemCaptionMode.PROPERTY);
			vehicleTwinColSelector.setItemCaptionPropertyId("registration");
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("unchecked")
	public List<Vehicle> getVehicles() {
		return new ArrayList<Vehicle>((Collection<? extends Vehicle>)vehicleTwinColSelector.getValue());
	}
	
	public Date getStartActivityDate() {
		return dateFilter.getStartFilterDate();
	}
	
	public Date getEndActivityDate() {
		return dateFilter.getEndFilterDate();
	}
	
	@Override
	public String getCaption() {
		 return "Filter Step"; 
	}
	 
	@Override
	public Component getContent() {
		return this;
	}

	@Override
	public boolean onAdvance() {
		return true;
	}

	@Override
	public boolean onBack() {
		return false;
	}
	
	@Override
	protected void updateLabels() {
		// TODO Auto-generated method stub
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// pnHelpStepTachoFilter
		pnHelpStepTachoFilter = buildPnHelpStepTachoFilter();
		mainLayout.addComponent(pnHelpStepTachoFilter);
		
		// filterToolbarLayout
		filterToolbarLayout = buildFilterToolbarLayout();
		mainLayout.addComponent(filterToolbarLayout);
		mainLayout.setExpandRatio(filterToolbarLayout, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPnHelpStepTachoFilter() {
		// common part: create layout
		pnHelpStepTachoFilter = new Panel();
		pnHelpStepTachoFilter.setImmediate(false);
		pnHelpStepTachoFilter.setWidth("100.0%");
		pnHelpStepTachoFilter.setHeight("-1px");
		
		// helpTachoFilterLayout
		helpTachoFilterLayout = buildHelpTachoFilterLayout();
		pnHelpStepTachoFilter.setContent(helpTachoFilterLayout);
		
		return pnHelpStepTachoFilter;
	}

	@AutoGenerated
	private VerticalLayout buildHelpTachoFilterLayout() {
		// common part: create layout
		helpTachoFilterLayout = new VerticalLayout();
		helpTachoFilterLayout.setImmediate(false);
		helpTachoFilterLayout.setWidth("100.0%");
		helpTachoFilterLayout.setHeight("100.0%");
		helpTachoFilterLayout.setMargin(true);
		
		// lblHelpTachoFilterStep
		lblHelpTachoFilterStep = new Label();
		lblHelpTachoFilterStep.setImmediate(false);
		lblHelpTachoFilterStep.setWidth("100.0%");
		lblHelpTachoFilterStep.setHeight("-1px");
		lblHelpTachoFilterStep.setValue("Label");
		helpTachoFilterLayout.addComponent(lblHelpTachoFilterStep);
		
		return helpTachoFilterLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildFilterToolbarLayout() {
		// common part: create layout
		filterToolbarLayout = new HorizontalLayout();
		filterToolbarLayout.setImmediate(false);
		filterToolbarLayout.setWidth("100.0%");
		filterToolbarLayout.setHeight("100.0%");
		filterToolbarLayout.setMargin(false);
		filterToolbarLayout.setSpacing(true);
		
		// vehicleTwinColSelector
		vehicleTwinColSelector = new TwinColSelect();
		vehicleTwinColSelector.setCaption("Select Vehicles");
		vehicleTwinColSelector.setImmediate(false);
		vehicleTwinColSelector.setWidth("-1px");
		vehicleTwinColSelector.setHeight("-1px");
		filterToolbarLayout.addComponent(vehicleTwinColSelector);
		
		// dateFilter
		dateFilter = new DateFilter();
		dateFilter.setCaption("Select Date Interval");
		dateFilter.setImmediate(false);
		dateFilter.setWidth("-1px");
		dateFilter.setHeight("-1px");
		filterToolbarLayout.addComponent(dateFilter);
		filterToolbarLayout.setExpandRatio(dateFilter, 1.0f);
		
		return filterToolbarLayout;
	}

}
