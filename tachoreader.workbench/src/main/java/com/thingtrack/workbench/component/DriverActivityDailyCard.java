package com.thingtrack.workbench.component;

import java.util.Date;
import java.util.Map;

import com.thingtrack.tachoreader.domain.CardActivityDaily;
import com.thingtrack.tachoreader.domain.CardActivityDailyChange;
import com.thingtrack.tachoreader.domain.CardActivityDailyChange.TYPE;
import com.thingtrack.tachoreader.domain.Driver;
import com.thingtrack.tachoreader.service.api.CardActivityDailyService;
import com.thingtrack.workbench.WorkbenchUI;
import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.PointClickEvent;
import com.vaadin.addon.charts.PointClickListener;
import com.vaadin.addon.charts.model.ChartType;
import com.vaadin.addon.charts.model.Configuration;
import com.vaadin.addon.charts.model.Cursor;
import com.vaadin.addon.charts.model.DataSeries;
import com.vaadin.addon.charts.model.DataSeriesItem;
import com.vaadin.addon.charts.model.Labels;
import com.vaadin.addon.charts.model.PlotOptionsPie;
import com.vaadin.addon.charts.model.style.SolidColor;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class DriverActivityDailyCard extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Panel driverActivityPanel;
	@AutoGenerated
	private VerticalLayout driverActivityLayout;
	@AutoGenerated
	private DriverActivityDailyChart detailDriverActivityDailyChart;
	@AutoGenerated
	private HorizontalLayout resumeDriverActivityLayout;
	@AutoGenerated
	private VerticalLayout resumeDriverActivityDataLayout;
	@AutoGenerated
	private VerticalLayout resumeDriverActivityChartLayout;
	private CardActivityDailyService cardActivityDailyService;
	
	private Chart driverActivityChart;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DriverActivityDailyCard() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		getServices();
		
		// set panel style
		TestIcon testIcon = new TestIcon(60);
		driverActivityPanel.setIcon(testIcon.get());
		driverActivityPanel.addStyleName("color1");		
	}
	
	public void paintCard(Driver driver, Date registerDate) throws Exception {
		// set driver activity card tittle
		driverActivityPanel.setCaption(driver.getName() + "-" + driver.getCardNumber());
		
		// fill resume driver activity card chart
		setResumeDriverActivityChart(driver, registerDate);
        		
		// fill detail driver activity card chart
		setDetailDriverActivityChart(driver, registerDate);		
	}
	
	private void setResumeDriverActivityChart(Driver driver, Date registerDate) throws Exception {
		Map<TYPE, Float> cardActivityDailyChangeGraphs = null;
		try {
			cardActivityDailyChangeGraphs = cardActivityDailyService.getCardActivityDailyGraphByDriver(driver, registerDate);
		}
		catch (Exception ex) {
			ex.getMessage();
		}
		
		driverActivityChart = new Chart(ChartType.PIE);
		driverActivityChart.setSizeFull();
				
		Configuration conf = driverActivityChart.getConfiguration();

        conf.setTitle("Detail Daily Activity Driver");
        conf.setSubTitle("Source: " + driver.getName() + "," + registerDate.toString());
        
        PlotOptionsPie plotOptions = new PlotOptionsPie();
        plotOptions.setAllowPointSelect(true);
        plotOptions.setCursor(Cursor.POINTER);
        Labels dataLabels = new Labels();
        dataLabels.setEnabled(true);
        dataLabels.setFormatter("''+ this.point.name +': '+ Math.round(this.percentage) +' %'");
        plotOptions.setDataLabels(dataLabels);
        conf.setPlotOptions(plotOptions);
        
        final DataSeries series = new DataSeries();
        for (Map.Entry<TYPE, Float> entry : cardActivityDailyChangeGraphs.entrySet()) {        	
        	TYPE type = entry.getKey();        	
        	Float value = entry.getValue();        	
        	
        	SolidColor color = null;
        	if (type.equals(CardActivityDailyChange.TYPE.UNKNOWN))
        		color = new SolidColor(CardActivityDailyChange.UNKNOWN_HEX_COLOR); // PURPLE;
            else if (type.equals(CardActivityDailyChange.TYPE.BREAK_REST))
            	color = new SolidColor(CardActivityDailyChange.BREAK_REST_HEX_COLOR); // RED	            	 
            else if (type.equals(CardActivityDailyChange.TYPE.SHORT_BREAK))
            	color = new SolidColor(CardActivityDailyChange.SHORT_BREAK_HEX_COLOR); // ORANGE
            else if (type.equals(CardActivityDailyChange.TYPE.AVAILABLE))
            	color = new SolidColor(CardActivityDailyChange.AVAILABLE_HEX_COLOR); // BLACK
            else if (type.equals(CardActivityDailyChange.TYPE.WORKING))
            	color = new SolidColor(CardActivityDailyChange.WORKING_HEX_COLOR); // YELLOW					 
            else if (type.equals(CardActivityDailyChange.TYPE.DRIVING))
            	color = new SolidColor(CardActivityDailyChange.DRIVING_HEX_COLOR); // GREEN
        	        	
        	series.add(new DataSeriesItem(type.name(), value, color));
        }
        conf.setSeries(series);
        
        driverActivityChart.addPointClickListener(new PointClickListener() {
            @Override
            public void onClick(PointClickEvent event) {
            	double y = series.get(event.getPointIndex()).getY().doubleValue();
            	double Hours = Math.floor(y);     
            	double Minutes = (y - Hours) * 60;  
            	String val = Hours + ":" + Minutes;
            	
                Notification.show("Time: "  + val);
            }
        });
                
        driverActivityChart.drawChart(conf);
        
        resumeDriverActivityChartLayout.addComponent(driverActivityChart);
	}
	
	private void setDetailDriverActivityChart(Driver driver, Date registerDate) throws Exception {
		CardActivityDaily cardActivityDaily = cardActivityDailyService.getCardActivityDailyByDriver(driver, registerDate);
		
		detailDriverActivityDailyChart.clearGraph();
		detailDriverActivityDailyChart.paintGraph(cardActivityDaily.getCardActivityDailyChanges());
	}
	
	private void getServices() {
		this.cardActivityDailyService = (CardActivityDailyService) WorkbenchUI.getCurrent().getApplicationContext().getBean("cardActivityDailyService");
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// driverActivityPanel
		driverActivityPanel = buildDriverActivityPanel();
		mainLayout.addComponent(driverActivityPanel);
		mainLayout.setExpandRatio(driverActivityPanel, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildDriverActivityPanel() {
		// common part: create layout
		driverActivityPanel = new Panel();
		driverActivityPanel.setImmediate(false);
		driverActivityPanel.setWidth("100.0%");
		driverActivityPanel.setHeight("-1px");
		
		// driverActivityLayout
		driverActivityLayout = buildDriverActivityLayout();
		driverActivityPanel.setContent(driverActivityLayout);
		
		return driverActivityPanel;
	}

	@AutoGenerated
	private VerticalLayout buildDriverActivityLayout() {
		// common part: create layout
		driverActivityLayout = new VerticalLayout();
		driverActivityLayout.setImmediate(false);
		driverActivityLayout.setWidth("100.0%");
		driverActivityLayout.setHeight("-1px");
		driverActivityLayout.setMargin(true);
		
		// resumeDriverActivityLayout
		resumeDriverActivityLayout = buildResumeDriverActivityLayout();
		driverActivityLayout.addComponent(resumeDriverActivityLayout);
		
		// detailDriverActivityDailyChart
		detailDriverActivityDailyChart = new DriverActivityDailyChart();
		detailDriverActivityDailyChart.setImmediate(false);
		detailDriverActivityDailyChart.setWidth("100.0%");
		detailDriverActivityDailyChart.setHeight("-1px");
		driverActivityLayout.addComponent(detailDriverActivityDailyChart);
		
		return driverActivityLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildResumeDriverActivityLayout() {
		// common part: create layout
		resumeDriverActivityLayout = new HorizontalLayout();
		resumeDriverActivityLayout.setImmediate(false);
		resumeDriverActivityLayout.setWidth("100.0%");
		resumeDriverActivityLayout.setHeight("-1px");
		resumeDriverActivityLayout.setMargin(false);
		
		// resumeDriverActivityChartLayout
		resumeDriverActivityChartLayout = new VerticalLayout();
		resumeDriverActivityChartLayout.setImmediate(false);
		resumeDriverActivityChartLayout.setWidth("500px");
		resumeDriverActivityChartLayout.setHeight("340px");
		resumeDriverActivityChartLayout.setMargin(false);
		resumeDriverActivityLayout
				.addComponent(resumeDriverActivityChartLayout);
		
		// resumeDriverActivityDataLayout
		resumeDriverActivityDataLayout = new VerticalLayout();
		resumeDriverActivityDataLayout.setImmediate(false);
		resumeDriverActivityDataLayout.setWidth("100.0%");
		resumeDriverActivityDataLayout.setHeight("-1px");
		resumeDriverActivityDataLayout.setMargin(false);
		resumeDriverActivityLayout.addComponent(resumeDriverActivityDataLayout);
		resumeDriverActivityLayout.setExpandRatio(
				resumeDriverActivityDataLayout, 1.0f);
		
		return resumeDriverActivityLayout;
	}

}
