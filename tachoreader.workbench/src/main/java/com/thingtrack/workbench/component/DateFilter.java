package com.thingtrack.workbench.component;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.apache.commons.lang3.time.DateUtils;

import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.server.FontAwesome;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;

@SuppressWarnings("serial")
public class DateFilter extends CssLayout {
	private Window dateFilterWindow;
	private SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyyy"); 
	private Calendar cal = Calendar.getInstance();
	
	private Date startFilterDate = null;
	private Date endFilterDate = null;
	
	private DateField fromDate;
	private DateField toDate;
	
	private final static Integer active_today = 1;
	private final static Integer active_yesteraday = 2;
	private final static Integer active_last7Days = 3;
	private final static Integer active_last30Days = 4;
	private final static Integer active_thisMonth = 5;
	private final static Integer active_lastMonth = 6;
	
	private Integer active = null;
	
	private ValueChangeFilterListener valueChangeFilterListener = null;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DateFilter() {
		this(null);		
	}
	
	public DateFilter(String caption) {		
		buildMainLayout();

		// TODO add user code here
		addStyleName("v-component-group");	
		
		setCaption(caption);
	}
	
	private void buildMainLayout() {
		final TextField tf = new TextField();
        tf.setInputPrompt("Select Activity Date");
        tf.setNullRepresentation("");
        tf.addStyleName("inline-icon");
		tf.addStyleName("align-left");
        tf.setIcon(FontAwesome.CALENDAR);        
        tf.setWidth("230px");
        tf.addValueChangeListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				if (tf.getValue() == null)
					return;
							
				String[] filterValues = tf.getValue().split("-");
						
				if (filterValues.length == 0) {
					startFilterDate = null;
					endFilterDate = null;
					active = null;
					tf.setValue(null);				
				}
				
				try {
					if (filterValues[0] != null) {
						if (filterValues[0].trim().equals(""))
							startFilterDate = null;
						else
							startFilterDate = dt.parse(filterValues[0].trim());
					}
					
					if (filterValues[1] != null) {
						if (filterValues[1].trim().equals(""))
							endFilterDate = null;
						else
							endFilterDate = dt.parse(filterValues[1].trim());
					}
					
					if (startFilterDate == null && endFilterDate == null) {
						tf.removeStyleName("align-right");
						tf.addStyleName("align-left");
						
						tf.setValue(null);
					}
					else {
						if (startFilterDate == null) {
							tf.removeStyleName("align-left");
							tf.addStyleName("align-right");
						}
						else {
							tf.removeStyleName("align-right");
							tf.addStyleName("align-left");
						}
						

					}
					
					fromDate.setValue(startFilterDate);
					toDate.setValue(endFilterDate);
					
					active = null;
					
					if (dateFilterWindow != null)
						dateFilterWindow.close();
					
					if (valueChangeFilterListener != null)					
						valueChangeFilterListener.valueChangeFilterClick(new FilterValueEvent(startFilterDate, endFilterDate));
				} catch (ParseException e) {
					Notification.show("Error parsing date", Type.ERROR_MESSAGE);
					return;
				}
				
			}
		});
        addComponent(tf);

        Button clearFilter = new Button("Clear");
        clearFilter.setImmediate(true);
        clearFilter.setIcon(FontAwesome.TIMES);
        clearFilter.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
        clearFilter.addClickListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				tf.removeStyleName("align-right");
				tf.addStyleName("align-left");
				
				startFilterDate = null;
				endFilterDate = null;
				active = null;
				tf.setValue(null);
				
				fromDate.setValue(null);
				toDate.setValue(null);
				
				if (valueChangeFilterListener != null)					
					valueChangeFilterListener.valueChangeFilterClick(new FilterValueEvent(startFilterDate, endFilterDate));
			}
        });
        addComponent(clearFilter);
        
        Button selectFilter = new Button("Select");
        selectFilter.setImmediate(true);
        selectFilter.setIcon(FontAwesome.CHEVRON_DOWN);
        selectFilter.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
        selectFilter.addClickListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				VerticalLayout filtersLayout = new VerticalLayout();
		        filtersLayout.setMargin(true);
		        filtersLayout.setSpacing(false);
		        filtersLayout.setWidth("100%");
		        filtersLayout.setHeight("-1px");		      		        	
		        	
		        final Button today = new Button("Hoy");
		        today.setImmediate(true);
		        today.setWidth("100%");		        
		        today.addStyleName(ValoTheme.BUTTON_TINY);	
		        today.addStyleName("filter_button");
	            if (active != null && active.equals(active_today))
					today.addStyleName(ValoTheme.BUTTON_PRIMARY);
		        today.addClickListener(new ClickListener() {					
					@Override
					public void buttonClick(ClickEvent event) {
						startFilterDate = new Date();
						endFilterDate = new Date();
						
						tf.setValue(dt.format(startFilterDate) + " - " + dt.format(endFilterDate));
												
						active = active_today;
						dateFilterWindow.close();
						dateFilterWindow = null;
					}
				});
		        filtersLayout.addComponent(today);

		        Button yesterday = new Button("Ayer");
		        yesterday.setWidth("100%");		        
		        yesterday.addStyleName(ValoTheme.BUTTON_TINY);
		        yesterday.addStyleName("filter_button");
	            if (active != null && active.equals(active_yesteraday))
	            	yesterday.addStyleName(ValoTheme.BUTTON_PRIMARY);
		        yesterday.addClickListener(new ClickListener() {					
					@Override
					public void buttonClick(ClickEvent event) {
						startFilterDate = DateUtils.addDays(new Date(),-1);
						endFilterDate = DateUtils.addDays(new Date(),-1);
						
						tf.setValue(dt.format(startFilterDate) + " - " + dt.format(endFilterDate));
										
						active = active_yesteraday;	
						dateFilterWindow.close();
						dateFilterWindow = null;
					}
				});
		        filtersLayout.addComponent(yesterday);
		        
		        Button last7Days = new Button("Últimos 7 días");
		        last7Days.setWidth("100%");
		        last7Days.addStyleName(ValoTheme.BUTTON_TINY);
		        last7Days.addStyleName("filter_button");
	            if (active != null && active.equals(active_last7Days))
	            	last7Days.addStyleName(ValoTheme.BUTTON_PRIMARY);
		        last7Days.addClickListener(new ClickListener() {					
					@Override
					public void buttonClick(ClickEvent event) {
						startFilterDate = DateUtils.addDays(new Date(),-6);
						endFilterDate = new Date();
						
						tf.setValue(dt.format(startFilterDate) + " - " + dt.format(endFilterDate));
						
						active = active_last7Days;
						dateFilterWindow.close();
						dateFilterWindow = null;
					}
				});
		        filtersLayout.addComponent(last7Days);
		        
		        Button last30Days = new Button("Últimos 30 días");
		        last30Days.setWidth("100%");
		        last30Days.addStyleName(ValoTheme.BUTTON_TINY);
		        last30Days.addStyleName("filter_button");
	            if (active != null && active.equals(active_last30Days))
	            	last30Days.addStyleName(ValoTheme.BUTTON_PRIMARY);
		        last30Days.addClickListener(new ClickListener() {					
					@Override
					public void buttonClick(ClickEvent event) {
						startFilterDate = DateUtils.addDays(new Date(),-29);
						endFilterDate = new Date();
						
						tf.setValue(dt.format(startFilterDate) + " - " + dt.format(endFilterDate));
						
						active = active_last30Days;
						dateFilterWindow.close();
						dateFilterWindow = null;
					}
				});
		        filtersLayout.addComponent(last30Days);
		        
		        Button thisMonth = new Button("Este mes");
		        thisMonth.setWidth("100%");
		        thisMonth.addStyleName(ValoTheme.BUTTON_TINY);
		        thisMonth.addStyleName("filter_button");
	            if (active != null && active.equals(active_thisMonth))
	            	thisMonth.addStyleName(ValoTheme.BUTTON_PRIMARY);
		        thisMonth.addClickListener(new ClickListener() {					
					@Override
					public void buttonClick(ClickEvent event) {
						cal.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMinimum(Calendar.DAY_OF_MONTH));
						startFilterDate = cal.getTime();
						cal.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));
						endFilterDate = cal.getTime();
						tf.setValue(dt.format(startFilterDate) + " - " + dt.format(endFilterDate));
						
						active = active_thisMonth;
						dateFilterWindow.close();
						dateFilterWindow = null;						
					}
				});
		        filtersLayout.addComponent(thisMonth);
		        		       
		        Button lastMonth = new Button("Mes anterior");
		        lastMonth.setWidth("100%");
		        lastMonth.addStyleName(ValoTheme.BUTTON_TINY);
		        lastMonth.addStyleName("filter_button");
	            if (active != null && active.equals(active_lastMonth))
	            	lastMonth.addStyleName(ValoTheme.BUTTON_PRIMARY);
		        lastMonth.addClickListener(new ClickListener() {					
					@Override
					public void buttonClick(ClickEvent event) {
						cal.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMinimum(Calendar.DAY_OF_MONTH));
						endFilterDate = DateUtils.addDays(cal.getTime(),-1);
						cal.setTime(endFilterDate);
						cal.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMinimum(Calendar.DAY_OF_MONTH));
						startFilterDate = cal.getTime();
						tf.setValue(dt.format(startFilterDate) + " - " + dt.format(endFilterDate));
						
						active = active_lastMonth;
						dateFilterWindow.close();
						dateFilterWindow = null;											
					}
				});
		        filtersLayout.addComponent(lastMonth);
		        
		        HorizontalLayout dateInterval = new HorizontalLayout();
		        dateInterval.setMargin(new MarginInfo(false, false, true, false));
		        dateInterval.setSpacing(true);
		        
		        fromDate = new DateField("Desde");
		        fromDate.setDateFormat("dd/MM/yyyy");
		        fromDate.setWidth("120px");
		        fromDate.addStyleName(ValoTheme.BUTTON_TINY);
		        
		        if (active == null)
		        	fromDate.setValue(startFilterDate);
		        
		        toDate = new DateField("Hasta");		        
		        toDate.setDateFormat("dd/MM/yyyy");
		        toDate.setWidth("120px");
		        toDate.addStyleName(ValoTheme.BUTTON_TINY);
		        
		        if (active == null)
		        	toDate.setValue(endFilterDate);
		        
		        dateInterval.addComponent(fromDate);
		        dateInterval.addComponent(toDate);
		        
		        filtersLayout.addComponent(dateInterval);
		        
		        HorizontalLayout footer = new HorizontalLayout();
		        footer.addStyleName(ValoTheme.WINDOW_BOTTOM_TOOLBAR);
		        footer.setWidth("100%");
		        footer.setSpacing(true);
		        
		        VerticalLayout aux = new VerticalLayout();
		        aux.setWidth("180px");
		        footer.addComponent(aux);		        
		        footer.setComponentAlignment(aux, Alignment.TOP_RIGHT);
		        
		        Button accept = new Button("Aceptar", new ClickListener() {
                    @Override
                    public void buttonClick(final ClickEvent event) {
                    	String filterValue = null;
                    	tf.removeStyleName("align-left");
                    	tf.removeStyleName("align-right");
                    	                
                    	startFilterDate = fromDate.getValue();
                    	endFilterDate = toDate.getValue();
                    	
                    	if (fromDate.getValue() != null && toDate.getValue() == null) {
                    		filterValue = dt.format(startFilterDate) + " - ";
                    		tf.addStyleName("align-left");
                    	}
                    	
                    	if (fromDate.getValue() == null && toDate.getValue() != null) {
                    		filterValue = " - " + dt.format(endFilterDate);
                    		tf.addStyleName("align-right");
                    	}
                    	
                    	if (fromDate.getValue() != null && toDate.getValue() != null) {
                    		filterValue = dt.format(startFilterDate) + " - " + dt.format(endFilterDate);
                    		tf.addStyleName("align-left");
                    	}
                    	
                    	tf.setValue(filterValue);
                    	
                    	active = null;
                    	dateFilterWindow.close();
                    	dateFilterWindow = null;
                    }
                });
		        accept.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		        accept.addStyleName(ValoTheme.BUTTON_SMALL);
		        accept.setWidth("-1px");
		        footer.addComponent(accept);
		        //footer.setExpandRatio(accept, 1.0f);
		        footer.setComponentAlignment(accept, Alignment.TOP_RIGHT);
		        
		        Button cancel = new Button("Cancelar", new ClickListener() {
                    @Override
                    public void buttonClick(final ClickEvent event) {
                    	dateFilterWindow.close();
                    }
                });
		        cancel.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		        cancel.addStyleName(ValoTheme.BUTTON_SMALL);
		        cancel.setWidth("-1px");
		        footer.addComponent(cancel);
		        footer.setComponentAlignment(cancel, Alignment.TOP_RIGHT);
		        
		        filtersLayout.addComponent(footer);

		        if (dateFilterWindow == null) {
		            dateFilterWindow = new Window();
		            dateFilterWindow.setWidth("315px");
		            dateFilterWindow.addStyleName("datefilter");
		            dateFilterWindow.setClosable(false);
		            dateFilterWindow.setResizable(false);
		            dateFilterWindow.setDraggable(false);
		            dateFilterWindow.setCloseShortcut(KeyCode.ESCAPE, null);
		            dateFilterWindow.setContent(filtersLayout);		          		           
		        }

		        if (!dateFilterWindow.isAttached()) {
		        	dateFilterWindow.setPositionX(event.getClientX() - event.getRelativeX());
		            dateFilterWindow.setPositionY(event.getClientY() - event.getRelativeY() + 40);
		            getUI().addWindow(dateFilterWindow);
		            		            
		            dateFilterWindow.focus();
		        } else {
		            dateFilterWindow.close();
		            dateFilterWindow = null;
		        }
				
			}
		});
        addComponent(selectFilter);
	}
	
	public Date getStartFilterDate() {
		return this.startFilterDate;
	}
	
	public Date getEndFilterDate() {
		return this.endFilterDate;
	}
	
	public void addValueChangeFilterListener(ValueChangeFilterListener listener) {
		this.valueChangeFilterListener = listener;		
	}
	
	public interface ValueChangeFilterListener extends Serializable {
        public void valueChangeFilterClick(FilterValueEvent event);
    }
	
	public class FilterValueEvent {
		private Date startFilterDate;
		private Date endFilterDate;	
		
		public FilterValueEvent(Date startFilterDate, Date endFilterDate) {			
			this.startFilterDate = startFilterDate;
			this.endFilterDate = endFilterDate;
		}

		public Date getStartFilterDate() {
			return this.startFilterDate;			
		}
		
		public Date getEndFilterDate() {
			return this.endFilterDate;			
		}		
	}
}
