package com.thingtrack.workbench.component;

import java.io.Serializable;

import org.tepi.filtertable.FilterTable;
import org.vaadin.haijian.ExcelExporter;
import org.vaadin.haijian.PdfExporter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.FontAwesome;
import com.vaadin.shared.MouseEventDetails;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

@SuppressWarnings("serial")
public class Toolbar extends AbstractI18NCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout toolbarLayout;
	@AutoGenerated
	private HorizontalLayout boxToolbar;
	@AutoGenerated
	private Button btnFilter;
	@AutoGenerated
	private Label lblSeparator;
	@AutoGenerated
	private PdfExporter btnPrint;
	@AutoGenerated
	private ExcelExporter btnExport;
	@AutoGenerated
	private HorizontalLayout separatorToolbar_01;
	@AutoGenerated
	private HorizontalLayout mainToolbar;
	@AutoGenerated
	private Button btnRefresh;
	@AutoGenerated
	private Button btnRemove;
	@AutoGenerated
	private Button btnSave;
	@AutoGenerated
	private Button btnAdd;
	
	// toolbar button listeners
	private ClickAddListener clickAddListener = null;
	private ClickSaveListener clickSaveListener = null;
	private ClickRemoveListener clickRemoveListener = null;
	private ClickRefreshListener clickRefreshListener = null;
	private ClickFilterListener clickFilterListener = null;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public Toolbar() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here		
		lblSeparator.setValue(null);
		
		btnAdd.setIcon(FontAwesome.FILE_TEXT_O);
		btnAdd.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnAdd.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
            	if (clickAddListener != null)					
					clickAddListener.addButtonClick(new ClickToolbarEvent(event.getComponent()));            	
            }
        });
		
		btnSave.setIcon(FontAwesome.SAVE);
		btnSave.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnSave.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
				if (clickSaveListener != null)					
					clickSaveListener.saveButtonClick(new ClickToolbarEvent(event.getComponent()));             	
            }
        });
		
		btnRemove.setIcon(FontAwesome.TRASH_O);
		btnRemove.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnRemove.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
				if (clickRemoveListener != null)					
					clickRemoveListener.removeButtonClick(new ClickToolbarEvent(event.getComponent()));             	
            }
        });
		
		btnRefresh.setIcon(FontAwesome.REFRESH);
		btnRefresh.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnRefresh.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
				if (clickRefreshListener != null)					
					clickRefreshListener.refreshButtonClick(new ClickToolbarEvent(event.getComponent()));            	
            }
        });
		
		btnExport.setIcon(FontAwesome.FILE_EXCEL_O);
		btnExport.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		
		btnPrint.setIcon(FontAwesome.PRINT);
		btnPrint.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		
		btnFilter.setIcon(FontAwesome.FILTER);
		btnFilter.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
				if (clickFilterListener != null)					
					clickFilterListener.addFilterClick(new ClickToolbarEvent(event.getComponent()));
            }
        });
	}
	
	public void setTable(FilterTable table) {
		btnPrint.setContainerToBeExported(table.getContainerDataSource());
		btnPrint.setVisibleColumns(table.getVisibleColumns());
		
		btnExport.setContainerToBeExported(table.getContainerDataSource());
		btnExport.setVisibleColumns(table.getVisibleColumns());
	}
	
	public void setDownloadFileName(String filename) {
		btnPrint.setDownloadFileName(filename + ".pdf");	
		btnExport.setDownloadFileName(filename + ".xls");
	}
	
	// navigator visible buttons	
	public void setVisibleAddButton(Boolean visible) {
		this.btnAdd.setVisible(visible);
	}
	public Boolean isVisibleAddButton() {
		return this.btnAdd.isVisible();
	}
	public void setVisibleSaveButton(Boolean visible) {
		this.btnSave.setVisible(visible);
	}
	public Boolean isVisibleSaveButton() {
		return this.btnSave.isVisible();
	}
	public void setVisibleRemoveButton(Boolean visible) {
		this.btnRemove.setVisible(visible);
	}
	public Boolean isVisibleRemoveButton() {
		return this.btnRemove.isVisible();
	}
	public void setVisibleFilterButton(Boolean visible) {
		this.btnFilter.setVisible(visible);
	}	
	public Boolean isVisibleFilterButton() {
		return this.btnFilter.isVisible();
	}
	
	// navigation add listener toolbar	
	public void addAddListener(ClickAddListener listener) {
		this.clickAddListener = listener;		
	}
	public void addSaveListener(ClickSaveListener listener) {
		this.clickSaveListener = listener;	
	}
	public void addRemoveListener(ClickRemoveListener listener) {
		this.clickRemoveListener = listener;		
	}
	public void addRefreshListener(ClickRefreshListener listener) {
		this.clickRefreshListener = listener;		
	}
	public void addFilterListener(ClickFilterListener listener) {
		this.clickFilterListener = listener;		
	}
	
	// navigation listener toolbar definition	
	public interface ClickAddListener extends Serializable {
        public void addButtonClick(ClickToolbarEvent event);
    }	
	public interface ClickSaveListener extends Serializable {
        public void saveButtonClick(ClickToolbarEvent event);
    }	
	public interface ClickRemoveListener extends Serializable {
        public void removeButtonClick(ClickToolbarEvent event);
    }
	public interface ClickRefreshListener extends Serializable {
        public void refreshButtonClick(ClickToolbarEvent event);
    }
	public interface ClickFilterListener extends Serializable {
        public void addFilterClick(ClickToolbarEvent event);
    }	
	
	public class ClickToolbarEvent extends ClickEvent {
		private int index;
		private Object register;
		
		public ClickToolbarEvent(Component source) {
            super(source);
        }
		
		public ClickToolbarEvent(Component source, MouseEventDetails details) {
			super(source, details);
		}
		
		public ClickToolbarEvent(Component source, MouseEventDetails details, Object register, int index) {
			super(source, details);
			
			this.index = index;
			this.register = register;
		}

		public int getIndex() {
			return this.index;			
		}
		
		public Object getRegister() {
			return this.register;			
		}		
	}
	
	@Override
	protected void updateLabels() {
		btnAdd.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.Toolbar.btnAdd.description"));
		btnSave.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.Toolbar.btnSave.description"));
		btnRemove.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.Toolbar.btnRemove.description"));
		btnRefresh.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.Toolbar.btnRefresh.description"));
		btnFilter.setCaption(getI18N().getMessage("com.thingtrack.workbench.component.Toolbar.btnFilter.caption"));
		btnFilter.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.Toolbar.btnFilter.description"));
		btnExport.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.Toolbar.btnExport.description"));
		btnPrint.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.Toolbar.btnPrint.description"));
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// toolbarLayout
		toolbarLayout = buildToolbarLayout();
		mainLayout.addComponent(toolbarLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildToolbarLayout() {
		// common part: create layout
		toolbarLayout = new HorizontalLayout();
		toolbarLayout.setImmediate(false);
		toolbarLayout.setWidth("-1px");
		toolbarLayout.setHeight("-1px");
		toolbarLayout.setMargin(false);
		
		// mainToolbar
		mainToolbar = buildMainToolbar();
		toolbarLayout.addComponent(mainToolbar);
		
		// separatorToolbar_01
		separatorToolbar_01 = new HorizontalLayout();
		separatorToolbar_01.setImmediate(false);
		separatorToolbar_01.setWidth("20px");
		separatorToolbar_01.setHeight("-1px");
		separatorToolbar_01.setMargin(false);
		toolbarLayout.addComponent(separatorToolbar_01);
		
		// boxToolbar
		boxToolbar = buildBoxToolbar();
		toolbarLayout.addComponent(boxToolbar);
		toolbarLayout.setExpandRatio(boxToolbar, 1.0f);
		
		return toolbarLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildMainToolbar() {
		// common part: create layout
		mainToolbar = new HorizontalLayout();
		mainToolbar.setImmediate(false);
		mainToolbar.setWidth("-1px");
		mainToolbar.setHeight("-1px");
		mainToolbar.setMargin(false);
		
		// btnAdd
		btnAdd = new Button();
		btnAdd.setCaption("Button");
		btnAdd.setImmediate(true);
		btnAdd.setWidth("-1px");
		btnAdd.setHeight("-1px");
		mainToolbar.addComponent(btnAdd);
		
		// btnSave
		btnSave = new Button();
		btnSave.setCaption("Button");
		btnSave.setImmediate(true);
		btnSave.setWidth("-1px");
		btnSave.setHeight("-1px");
		mainToolbar.addComponent(btnSave);
		
		// btnRemove
		btnRemove = new Button();
		btnRemove.setCaption("Button");
		btnRemove.setImmediate(true);
		btnRemove.setWidth("-1px");
		btnRemove.setHeight("-1px");
		mainToolbar.addComponent(btnRemove);
		
		// btnRefresh
		btnRefresh = new Button();
		btnRefresh.setCaption("Button");
		btnRefresh.setImmediate(true);
		btnRefresh
				.setDescription("Refrescar los datos actuales leyendo de la base de datos.");
		btnRefresh.setWidth("-1px");
		btnRefresh.setHeight("-1px");
		mainToolbar.addComponent(btnRefresh);
		
		return mainToolbar;
	}

	@AutoGenerated
	private HorizontalLayout buildBoxToolbar() {
		// common part: create layout
		boxToolbar = new HorizontalLayout();
		boxToolbar.setImmediate(false);
		boxToolbar.setWidth("100.0%");
		boxToolbar.setHeight("-1px");
		boxToolbar.setMargin(false);
		
		// btnExport
		btnExport = new ExcelExporter();
		btnExport.setCaption("Export");
		btnExport.setImmediate(true);
		btnExport.setDescription("Export Excel");
		btnExport.setWidth("-1px");
		btnExport.setHeight("-1px");
		boxToolbar.addComponent(btnExport);
		
		// btnPrint
		btnPrint = new PdfExporter();
		btnPrint.setCaption("Print");
		btnPrint.setImmediate(true);
		btnPrint.setDescription("Print Registers");
		btnPrint.setWidth("-1px");
		btnPrint.setHeight("-1px");
		boxToolbar.addComponent(btnPrint);		
		boxToolbar.setExpandRatio(btnPrint, 1.0f);
		
		// lblSeparator
		lblSeparator = new Label();
		lblSeparator.setImmediate(false);
		lblSeparator.setWidth("20px");
		lblSeparator.setHeight("-1px");
		lblSeparator.setValue("Label");
		boxToolbar.addComponent(lblSeparator);
		
		// btnFilter
		btnFilter = new Button();
		btnFilter.setCaption("Filter");
		btnFilter.setImmediate(true);
		btnFilter.setWidth("-1px");
		btnFilter.setHeight("-1px");
		boxToolbar.addComponent(btnFilter);
		
		return boxToolbar;
	}
}
