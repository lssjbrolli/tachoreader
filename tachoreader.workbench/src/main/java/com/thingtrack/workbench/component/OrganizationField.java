package com.thingtrack.workbench.component;

import java.io.File;
import java.util.List;

import org.apache.commons.io.FileUtils;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.ShortcutListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.UserError;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.themes.ValoTheme;
import com.thingtrack.tachoreader.domain.Organization;
import com.thingtrack.tachoreader.service.api.OrganizationService;
import com.thingtrack.workbench.WorkbenchUI;
import com.thingtrack.workbench.component.AbstractI18NCustomField;
import com.thingtrack.workbench.event.DashboardEventBus;
import com.thingtrack.workbench.view.organization.OrganizationForm;
import com.thingtrack.workbench.event.DashboardEvent.OrganizationIncludeEvent;
import com.thingtrack.workbench.event.DashboardEvent.OrganizationExcludeEvent;

@SuppressWarnings("serial")
public class OrganizationField extends AbstractI18NCustomField<List<Organization>> {
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table organizationTable;
	@AutoGenerated
	private HorizontalLayout buttonLayout;
	@AutoGenerated
	private Button btnExcludeOrganization;
	@AutoGenerated
	private Button btnIncludeOrganization;
	@AutoGenerated
	private Button btnRemoveOrganization;	
	@AutoGenerated
	private Button btnSaveOrganization;
	@AutoGenerated
	private Button btnAddOrganization;	
	@AutoGenerated
	private ComboBox cmbOrganization;
	
	private List<Organization> organizations;
	private BeanItemContainer<Organization> organizationContainer = new BeanItemContainer<Organization>(Organization.class);
	
	private OrganizationService organizationService;
	
	//private String tachoRepository;
	
	public OrganizationField() {
		buildMainLayout();

		buttonLayout.setMargin(new MarginInfo(false, false, true, false));
		
		btnAddOrganization.setIcon(FontAwesome.FILE_TEXT_O);
		btnAddOrganization.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnSaveOrganization.setIcon(FontAwesome.SAVE);
		btnSaveOrganization.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnRemoveOrganization.setIcon(FontAwesome.TRASH_O);
		btnRemoveOrganization.addStyleName(ValoTheme.BUTTON_ICON_ONLY);		
		btnIncludeOrganization.setIcon(FontAwesome.CHEVRON_DOWN);
		btnIncludeOrganization.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnExcludeOrganization.setIcon(FontAwesome.CHEVRON_UP);
		btnExcludeOrganization.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		
		// get Services
		getServices();
				
		// fill the combo role selector
        final BeanItemContainer<Organization> container = new BeanItemContainer<Organization>(Organization.class);
        try {
			container.addAll(organizationService.getAll(WorkbenchUI.getCurrent().getUser()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                
        cmbOrganization.setContainerDataSource(container);
        cmbOrganization.setItemCaptionMode(ItemCaptionMode.PROPERTY);
        cmbOrganization.setItemCaptionPropertyId("name");
        cmbOrganization.setNullSelectionAllowed(false);
        cmbOrganization.addShortcutListener(new ShortcutListener("Add", KeyCode.ENTER, null) {
            @Override
            public void handleAction(Object sender, Object target) {
            	includeOrganization();
            }
        });
        
        // define button events
        btnAddOrganization.addClickListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				// created selected item
				Organization organization = organizationService.createNewEntity(WorkbenchUI.getCurrent().getUser());
				
				try {
					@SuppressWarnings({ "unused" })
					WindowForm<Organization> organizationWindow = new WindowForm<Organization>(getI18N().getMessage("com.thingtrack.workbench.view.organization.OrganizationView.tittle.add"), getI18N(), organization, new OrganizationForm(), new WindowForm.CloseWindowDialogListener<Organization>() {
						@Override
						public void windowDialogClose(WindowForm<Organization>.CloseWindowDialogEvent<Organization> event) {					
							if (event.getDialogResult() != WindowForm.DialogResult.OK)															
					    		return;					    		
												
							try {			
								// register a organization								
								Organization organization = organizationService.save(event.getDomainEntity());
								
								// create organization tachos repository if not exist
								File tachosRepositoryFile = new File(WorkbenchUI.getCurrent().getTachoRepository() + "/" + organization.getId());
								
								if (!tachosRepositoryFile.exists() && !tachosRepositoryFile.isDirectory())
									FileUtils.forceMkdir(new File(WorkbenchUI.getCurrent().getTachoRepository() + "/" + organization.getId()));
								
								// refresh organization list selector
								container.removeAllItems();
								container.addAll(organizationService.getAll(WorkbenchUI.getCurrent().getUser()));
								
								cmbOrganization.select(organization);
								
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					});
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});        
        btnSaveOrganization.addClickListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				// get selected item
				Organization organization = (Organization) organizationTable.getValue();
				
				try {
					@SuppressWarnings({ "unused" })
					WindowForm<Organization> organizationWindow = new WindowForm<Organization>(getI18N().getMessage("com.thingtrack.workbench.view.organization.OrganizationView.tittle.edit"), getI18N(), organization, new OrganizationForm(), new WindowForm.CloseWindowDialogListener<Organization>() {
						@Override
						public void windowDialogClose(WindowForm<Organization>.CloseWindowDialogEvent<Organization> event) {					
							if (event.getDialogResult() != WindowForm.DialogResult.OK)															
					    		return;					    		
												
							try {
								// update entity
								Organization organization = (Organization) organizationTable.getValue();
								organization.setUpdatedBy(WorkbenchUI.getCurrent().getUser());
								
								organization = organizationService.save(organization);
								
								container.addAll(organizationService.getAll(WorkbenchUI.getCurrent().getUser()));
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					});
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});
        btnRemoveOrganization.addClickListener(new ClickListener() {			
			@SuppressWarnings({ "unused", "rawtypes" })
			@Override
			public void buttonClick(ClickEvent event) {
				ConfirmForm organizationConfirmForm = new ConfirmForm(getI18N().getMessage("com.thingtrack.workbench.view.organization.OrganizationView.tittle.remove"), getI18N().getMessage("com.thingtrack.workbench.view.driver.DriverView.question.remove"), new ConfirmForm.CloseConfirmFormListener() {
					@Override
					public void windowDialogClose(ConfirmForm.CloseWindowDialogEvent event) {						
						if (event.getDialogResult() != ConfirmForm.DialogResult.YES)															
				    		return;	
						
						try {
							// remove entity (unset entity)
							Organization organization = (Organization) organizationTable.getValue();
							
							//Organization.setActive(false);
							organizationService.save(organization);
							
							// refresh combox
							container.addAll(organizationService.getAll(WorkbenchUI.getCurrent().getUser()));
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				});	
			}
		});
        
		btnIncludeOrganization.addClickListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				if (cmbOrganization.getValue() == null)
					return;
		
				includeOrganization();
				
				DashboardEventBus.post(new OrganizationIncludeEvent((Organization)cmbOrganization.getValue()));
			}
		});
		
		btnExcludeOrganization.addClickListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				if (organizationTable.getValue() == null)
					return;
				
				excludeOrganization();
				
				DashboardEventBus.post(new OrganizationExcludeEvent((Organization)cmbOrganization.getValue()));
			}
		});
	}
	
	private void includeOrganization() {
		cmbOrganization.setComponentError(null);
		
		organizations.add((Organization) cmbOrganization.getValue());
		
		organizationContainer.removeAllItems();
		organizationContainer.addAll(organizations);
		
		setValue(organizations);
	}
	
	private void excludeOrganization() {
		if (organizationContainer.size() == 1) {
			cmbOrganization.setComponentError(new UserError("Must exist at least one organization"));
			return;
		}
		else
			cmbOrganization.setComponentError(null);
		
		organizations.remove((Organization) organizationTable.getValue());		
		
		organizationContainer.removeAllItems();
		organizationContainer.addAll(organizations);
		
		setValue(organizations);
	}
	
	private void getServices() {
		this.organizationService = (OrganizationService) WorkbenchUI.getCurrent().getApplicationContext().getBean("organizationService");	
	}
		
	@Override
	public boolean isValid() {
		boolean errorValidation = false;
		
		if (organizationContainer.size() == 0) {
			cmbOrganization.setComponentError(new UserError("Add at least one organization"));
			errorValidation = true;			
		}
		else
			cmbOrganization.setComponentError(null);
		
		return errorValidation;
	}
	
	@Override
	protected Component initContent() {
		return mainLayout;		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Class<? extends List<Organization>> getType() {
		return (Class<? extends List<Organization>>) List.class;	
	}
	
	@Override
    protected void setInternalValue(List<Organization> organizations) {	        
        super.setInternalValue(organizations);
        
        this.organizations = organizations;
        
        // bound the table
        organizationContainer.addAll(this.organizations);
        
        organizationTable.setContainerDataSource(organizationContainer);
        organizationTable.setSelectable(true);
        organizationTable.setNullSelectionAllowed(false);
        organizationTable.setVisibleColumns((Object[]) new String[] { "code", "name" } );
		organizationTable.setColumnHeaders(new String[] { "Code", "Name" } );
		
		if (organizationContainer.size() > 0)
			organizationTable.select(organizationContainer.getIdByIndex(0));
    }
	
	@Override
	protected void updateLabels() {
		organizationTable.setColumnHeaders(new String[] { getI18N().getMessage("com.thingtrack.workbench.component.OrganizationField.organizationTable.column.code"),
				  getI18N().getMessage("com.thingtrack.workbench.component.OrganizationField.organizationTable.column.name")
				  });
		
		cmbOrganization.setCaption(getI18N().getMessage("com.thingtrack.workbench.component.OrganizationField.cmbOrganization.caption"));
		btnAddOrganization.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.OrganizationField.btnAddOrganization.description"));
		btnSaveOrganization.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.OrganizationField.btnSaveOrganization.description"));
		btnRemoveOrganization.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.OrganizationField.btnRemoveOrganization.description"));
		btnIncludeOrganization.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.OrganizationField.btnIncludeOrganization.description"));
		btnExcludeOrganization.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.OrganizationField.btnExcludeOrganization.description"));		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);
		
		// tblOrganization
		organizationTable = new Table();
		organizationTable.setImmediate(false);
		organizationTable.setWidth("100.0%");
		organizationTable.setHeight("100.0%");
		mainLayout.addComponent(organizationTable);
		mainLayout.setExpandRatio(organizationTable, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("100.0%");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		
		// cmbOrganization
		cmbOrganization = new ComboBox();
		cmbOrganization.setCaption("Organization");
		cmbOrganization.setImmediate(false);
		cmbOrganization.setWidth("200px");
		cmbOrganization.setHeight("-1px");
		buttonLayout.addComponent(cmbOrganization);
		
		// btnAddOrganization
		btnAddOrganization = new Button();
		btnAddOrganization.setImmediate(false);
		btnAddOrganization.setDescription("Add organization");		
		btnAddOrganization.setWidth("-1px");
		btnAddOrganization.setHeight("-1px");
		buttonLayout.addComponent(btnAddOrganization);
		buttonLayout.setComponentAlignment(btnAddOrganization, new Alignment(9));
		
		// btnSaveOrganization
		btnSaveOrganization = new Button();
		btnSaveOrganization.setImmediate(false);
		btnSaveOrganization.setDescription("Edit organization");		
		btnSaveOrganization.setWidth("-1px");
		btnSaveOrganization.setHeight("-1px");
		buttonLayout.addComponent(btnSaveOrganization);
		buttonLayout.setComponentAlignment(btnSaveOrganization, new Alignment(9));
			
		// btnRemoveOrganization
		btnRemoveOrganization = new Button();
		btnRemoveOrganization.setDescription("Remove organization");
		btnRemoveOrganization.setImmediate(false);
		btnRemoveOrganization.setWidth("-1px");
		btnRemoveOrganization.setHeight("-1px");
		buttonLayout.addComponent(btnRemoveOrganization);
		buttonLayout.setComponentAlignment(btnRemoveOrganization, new Alignment(9));
		
		// btnAddOrganization
		btnIncludeOrganization = new Button();
		btnIncludeOrganization.setImmediate(false);
		btnIncludeOrganization.setDescription("Include Organization");
		btnIncludeOrganization.setWidth("-1px");
		btnIncludeOrganization.setHeight("-1px");
		buttonLayout.addComponent(btnIncludeOrganization);
		buttonLayout.setExpandRatio(btnIncludeOrganization, 1.0f);
		buttonLayout.setComponentAlignment(btnIncludeOrganization, new Alignment(10));
		
		// btnRemoveOrganization
		btnExcludeOrganization = new Button();
		btnExcludeOrganization.setImmediate(false);
		btnExcludeOrganization.setDescription("Exclude Organization");
		btnExcludeOrganization.setWidth("-1px");
		btnExcludeOrganization.setHeight("-1px");
		buttonLayout.addComponent(btnExcludeOrganization);
		buttonLayout.setComponentAlignment(btnExcludeOrganization, new Alignment(10));
		
		return buttonLayout;
	}
}
