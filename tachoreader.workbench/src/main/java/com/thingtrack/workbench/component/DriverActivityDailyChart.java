package com.thingtrack.workbench.component;

import java.util.List;

import com.thingtrack.tachoreader.domain.CardActivityDailyChange;
import com.thingtrack.tachoreader.domain.CardActivityDailyChange.TYPE;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.shared.ui.colorpicker.Color;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Component;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class DriverActivityDailyChart extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout legendlLayout;
	@AutoGenerated
	private VerticalLayout chartLayout;
	@AutoGenerated
	private HorizontalLayout hlAxisHour;
	@AutoGenerated
	private Label lblH24;
	@AutoGenerated
	private Label lblH23;
	@AutoGenerated
	private Label lblH22;
	@AutoGenerated
	private Label lblH21;
	@AutoGenerated
	private Label lblH20;
	@AutoGenerated
	private Label lblH19;
	@AutoGenerated
	private Label lblH18;
	@AutoGenerated
	private Label lblH17;
	@AutoGenerated
	private Label lblH16;
	@AutoGenerated
	private Label lblH15;
	@AutoGenerated
	private Label lblH14;
	@AutoGenerated
	private Label lblH13;
	@AutoGenerated
	private Label lblH12;
	@AutoGenerated
	private Label lblH11;
	@AutoGenerated
	private Label lblH10;
	@AutoGenerated
	private Label lblH09;
	@AutoGenerated
	private Label lblH08;
	@AutoGenerated
	private Label lblH07;
	@AutoGenerated
	private Label lblH06;
	@AutoGenerated
	private Label lblH05;
	@AutoGenerated
	private Label lblH04;
	@AutoGenerated
	private Label lblH03;
	@AutoGenerated
	private Label lblH02;
	@AutoGenerated
	private Label lblH01;
	@AutoGenerated
	private Label lblH00;
	
	private CssLayout layout =null;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	@SuppressWarnings("unused")
	public DriverActivityDailyChart() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		layout = new CssLayout() {
			 private static final long serialVersionUID = 321137800557050145L;

			 @Override
			 protected String getCss(Component c) {
				 if (c instanceof Label) {
					 TYPE type = (TYPE) ((Label) c).getData();
					 
					 Color rgb = Color.WHITE;
					 if (type.equals(CardActivityDailyChange.TYPE.UNKNOWN))
						 rgb = Color.CYAN;
		             else if (type.equals(CardActivityDailyChange.TYPE.BREAK_REST))
		            	 rgb = Color.RED;
		             else if (type.equals(CardActivityDailyChange.TYPE.SHORT_BREAK))
		            	 rgb = Color.BLUE;
		             else if (type.equals(CardActivityDailyChange.TYPE.AVAILABLE))
		            	 rgb = Color.BLACK;
		             else if (type.equals(CardActivityDailyChange.TYPE.WORKING))
		            	 rgb = Color.YELLOW;      
		             else if (type.equals(CardActivityDailyChange.TYPE.DRIVING))
		            	 rgb = Color.GREEN;
					 
					 // Color the boxes with random colors
					 return "background: #" + Integer.toHexString(-1*rgb.getRGB());
				 }
				 
				 return null;
			 }
	      };
	      	      
	      layout.setSizeFull();
	      chartLayout.addComponent(layout);
	      
	}
	
	@SuppressWarnings("deprecation")
	public void paintGraph(List<CardActivityDailyChange> cardActivityDailyChanges) {
		float initPoint = 0;
		
		layout.removeAllComponents();
        for (CardActivityDailyChange cardActivityDailyChange : cardActivityDailyChanges) {		
			Label box = new Label("&nbsp;", Label.CONTENT_XHTML);
            box.addStyleName("flowbox");
            
            String hour = String.valueOf(cardActivityDailyChange.getRecordDate().getHours());
            String minute = String.valueOf(cardActivityDailyChange.getRecordDate().getMinutes());
            float width = Float.parseFloat(hour) + Float.parseFloat(minute)/60;
            float widthPercent = ((width - initPoint)/ 24) * 100;
            box.setWidth(widthPercent, Unit.PERCENTAGE);
            box.setData(cardActivityDailyChange.getType());
            
            if (cardActivityDailyChange.getType().equals(CardActivityDailyChange.TYPE.UNKNOWN))
            	box.setHeight(10, Unit.PIXELS);
            else if (cardActivityDailyChange.getType().equals(CardActivityDailyChange.TYPE.BREAK_REST))
            	box.setHeight(20, Unit.PIXELS);
            else if (cardActivityDailyChange.getType().equals(CardActivityDailyChange.TYPE.SHORT_BREAK))
            	box.setHeight(30, Unit.PIXELS);
            else if (cardActivityDailyChange.getType().equals(CardActivityDailyChange.TYPE.AVAILABLE))
            	box.setHeight(40, Unit.PIXELS);
            else if (cardActivityDailyChange.getType().equals(CardActivityDailyChange.TYPE.WORKING))
            	box.setHeight(50, Unit.PIXELS);            
            else if (cardActivityDailyChange.getType().equals(CardActivityDailyChange.TYPE.DRIVING))
            	box.setHeight(60, Unit.PIXELS);

            layout.addComponent(box);
            
            initPoint = width;
        }	
	}
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("480px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("480px");
		
		// chartLayout
		chartLayout = buildChartLayout();
		mainLayout.addComponent(chartLayout);
		mainLayout.setExpandRatio(chartLayout, 1.0f);
		
		// legendlLayout
		legendlLayout = new VerticalLayout();
		legendlLayout.setImmediate(false);
		legendlLayout.setWidth("200px");
		legendlLayout.setHeight("100.0%");
		legendlLayout.setMargin(false);
		mainLayout.addComponent(legendlLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildChartLayout() {
		// common part: create layout
		chartLayout = new VerticalLayout();
		chartLayout.setImmediate(false);
		chartLayout.setWidth("100.0%");
		chartLayout.setHeight("100.0%");
		chartLayout.setMargin(false);
		
		// hlAxisHour
		hlAxisHour = buildHlAxisHour();
		chartLayout.addComponent(hlAxisHour);
		chartLayout.setComponentAlignment(hlAxisHour, new Alignment(9));
		
		return chartLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHlAxisHour() {
		// common part: create layout
		hlAxisHour = new HorizontalLayout();
		hlAxisHour.setImmediate(false);
		hlAxisHour.setWidth("100.0%");
		hlAxisHour.setHeight("-1px");
		hlAxisHour.setMargin(false);
		
		// lblH00
		lblH00 = new Label();
		lblH00.setImmediate(false);
		lblH00.setWidth("-1px");
		lblH00.setHeight("-1px");
		lblH00.setValue("0");
		hlAxisHour.addComponent(lblH00);
		
		// lblH01
		lblH01 = new Label();
		lblH01.setImmediate(false);
		lblH01.setWidth("-1px");
		lblH01.setHeight("-1px");
		lblH01.setValue("1");
		hlAxisHour.addComponent(lblH01);
		
		// lblH02
		lblH02 = new Label();
		lblH02.setImmediate(false);
		lblH02.setWidth("-1px");
		lblH02.setHeight("-1px");
		lblH02.setValue("2");
		hlAxisHour.addComponent(lblH02);
		
		// lblH03
		lblH03 = new Label();
		lblH03.setImmediate(false);
		lblH03.setWidth("-1px");
		lblH03.setHeight("-1px");
		lblH03.setValue("3");
		hlAxisHour.addComponent(lblH03);
		
		// lblH04
		lblH04 = new Label();
		lblH04.setImmediate(false);
		lblH04.setWidth("-1px");
		lblH04.setHeight("-1px");
		lblH04.setValue("4");
		hlAxisHour.addComponent(lblH04);
		
		// lblH05
		lblH05 = new Label();
		lblH05.setImmediate(false);
		lblH05.setWidth("-1px");
		lblH05.setHeight("-1px");
		lblH05.setValue("5");
		hlAxisHour.addComponent(lblH05);
		
		// lblH06
		lblH06 = new Label();
		lblH06.setImmediate(false);
		lblH06.setWidth("-1px");
		lblH06.setHeight("-1px");
		lblH06.setValue("6");
		hlAxisHour.addComponent(lblH06);
		
		// lblH07
		lblH07 = new Label();
		lblH07.setImmediate(false);
		lblH07.setWidth("-1px");
		lblH07.setHeight("-1px");
		lblH07.setValue("7");
		hlAxisHour.addComponent(lblH07);
		
		// lblH08
		lblH08 = new Label();
		lblH08.setImmediate(false);
		lblH08.setWidth("-1px");
		lblH08.setHeight("-1px");
		lblH08.setValue("8");
		hlAxisHour.addComponent(lblH08);
		
		// lblH09
		lblH09 = new Label();
		lblH09.setImmediate(false);
		lblH09.setWidth("-1px");
		lblH09.setHeight("-1px");
		lblH09.setValue("9");
		hlAxisHour.addComponent(lblH09);
		
		// lblH10
		lblH10 = new Label();
		lblH10.setImmediate(false);
		lblH10.setWidth("-1px");
		lblH10.setHeight("-1px");
		lblH10.setValue("10");
		hlAxisHour.addComponent(lblH10);
		
		// lblH11
		lblH11 = new Label();
		lblH11.setImmediate(false);
		lblH11.setWidth("-1px");
		lblH11.setHeight("-1px");
		lblH11.setValue("11");
		hlAxisHour.addComponent(lblH11);
		
		// lblH12
		lblH12 = new Label();
		lblH12.setImmediate(false);
		lblH12.setWidth("-1px");
		lblH12.setHeight("-1px");
		lblH12.setValue("12");
		hlAxisHour.addComponent(lblH12);
		
		// lblH13
		lblH13 = new Label();
		lblH13.setImmediate(false);
		lblH13.setWidth("-1px");
		lblH13.setHeight("-1px");
		lblH13.setValue("13");
		hlAxisHour.addComponent(lblH13);
		
		// lblH14
		lblH14 = new Label();
		lblH14.setImmediate(false);
		lblH14.setWidth("-1px");
		lblH14.setHeight("-1px");
		lblH14.setValue("14");
		hlAxisHour.addComponent(lblH14);
		
		// lblH15
		lblH15 = new Label();
		lblH15.setImmediate(false);
		lblH15.setWidth("-1px");
		lblH15.setHeight("-1px");
		lblH15.setValue("15");
		hlAxisHour.addComponent(lblH15);
		
		// lblH16
		lblH16 = new Label();
		lblH16.setImmediate(false);
		lblH16.setWidth("-1px");
		lblH16.setHeight("-1px");
		lblH16.setValue("16");
		hlAxisHour.addComponent(lblH16);
		
		// lblH17
		lblH17 = new Label();
		lblH17.setImmediate(false);
		lblH17.setWidth("-1px");
		lblH17.setHeight("-1px");
		lblH17.setValue("17");
		hlAxisHour.addComponent(lblH17);
		
		// lblH18
		lblH18 = new Label();
		lblH18.setImmediate(false);
		lblH18.setWidth("-1px");
		lblH18.setHeight("-1px");
		lblH18.setValue("18");
		hlAxisHour.addComponent(lblH18);
		
		// lblH19
		lblH19 = new Label();
		lblH19.setImmediate(false);
		lblH19.setWidth("-1px");
		lblH19.setHeight("-1px");
		lblH19.setValue("19");
		hlAxisHour.addComponent(lblH19);
		
		// lblH20
		lblH20 = new Label();
		lblH20.setImmediate(false);
		lblH20.setWidth("-1px");
		lblH20.setHeight("-1px");
		lblH20.setValue("20");
		hlAxisHour.addComponent(lblH20);
		
		// lblH21
		lblH21 = new Label();
		lblH21.setImmediate(false);
		lblH21.setWidth("-1px");
		lblH21.setHeight("-1px");
		lblH21.setValue("21");
		hlAxisHour.addComponent(lblH21);
		
		// lblH22
		lblH22 = new Label();
		lblH22.setImmediate(false);
		lblH22.setWidth("-1px");
		lblH22.setHeight("-1px");
		lblH22.setValue("22");
		hlAxisHour.addComponent(lblH22);
		
		// lblH23
		lblH23 = new Label();
		lblH23.setImmediate(false);
		lblH23.setWidth("-1px");
		lblH23.setHeight("-1px");
		lblH23.setValue("23");
		hlAxisHour.addComponent(lblH23);
		
		// lblH24
		lblH24 = new Label();
		lblH24.setImmediate(false);
		lblH24.setWidth("-1px");
		lblH24.setHeight("-1px");
		lblH24.setValue("24");
		hlAxisHour.addComponent(lblH24);
		
		return hlAxisHour;
	}

}
