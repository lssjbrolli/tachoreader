package com.thingtrack.workbench.component;

import java.io.Serializable;

import pl.exsio.plupload.Plupload;
import pl.exsio.plupload.Plupload.FileUploadedListener;
import pl.exsio.plupload.PluploadError;
import pl.exsio.plupload.PluploadFile;
import pl.exsio.plupload.helper.filter.PluploadFilter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.FontAwesome;
import com.vaadin.shared.MouseEventDetails;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

@SuppressWarnings("serial")
public class ToolbarTacho extends AbstractI18NCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout toolbarLayout;
	@AutoGenerated
	private Button btnDownload;
	@AutoGenerated
	private Plupload btnUpload;
	@AutoGenerated
	private HorizontalLayout separatorToolbar_02;
	@AutoGenerated
	private HorizontalLayout boxToolbar;
	@AutoGenerated
	private Button btnUnselectAllTachos;
	@AutoGenerated
	private Button btnSelectAllTachos;
	
	// toolbar button listeners
	private ClickSelectAllTachosListener clickSelectAllTachosListener = null;
	private ClickUnselectAllTachosListener clickUnselectAllTachosListener = null;
	private FileUploadedListener fileUploadedListener = null;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ToolbarTacho() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here		
		btnUpload.setMultiSelection(true);
		btnUpload.setPreventDuplicates(true);
		btnUpload.addFilter(new PluploadFilter("Tachograph files", "ddd,tgd,crd,esm,dc,tdc"));
		btnUpload.addStyleName("danger");
		
		btnDownload.addStyleName("friendly");
			
		btnSelectAllTachos.setIcon(FontAwesome.CHECK_SQUARE_O);
		btnSelectAllTachos.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnSelectAllTachos.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
				if (clickSelectAllTachosListener != null)					
					clickSelectAllTachosListener.selectAllTachosClick(new ClickToolbarEvent(event.getComponent()));
            }
        });
		btnUnselectAllTachos.setIcon(FontAwesome.SQUARE_O);
		btnUnselectAllTachos.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		btnUnselectAllTachos.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
				if (clickUnselectAllTachosListener != null)					
					clickUnselectAllTachosListener.unselectAllTachosClick(new ClickToolbarEvent(event.getComponent()));
            }
        });
				
		btnUpload.addFileUploadedListener(new Plupload.FileUploadedListener() {
		       @Override
		       public void onFileUploaded(PluploadFile file) {		    	   	            
		    	   if (fileUploadedListener != null)
		    		   fileUploadedListener.onFileUploaded(file);
		       }
		});
		
		//update upload progress
		btnUpload.addUploadProgressListener(new Plupload.UploadProgressListener() {
		       @Override
		       public void onUploadProgress(PluploadFile file) {
		             //info.setValue("I'm uploading "+file.getName() +"and I'm at "+file.getPercent()+"%");
		       }
		});
		
		//autostart the uploader after addind files
		btnUpload.addFilesAddedListener(new Plupload.FilesAddedListener() {
		       @Override
		       public void onFilesAdded(PluploadFile[] files) {
		    	   btnUpload.start();
		       }
		});
		
		//notify, when the upload process is completed
		btnUpload.addUploadCompleteListener(new Plupload.UploadCompleteListener() {
		       @Override
		       public void onUploadComplete() {			    	
			    	NotificationHelper.sendInformationNotification("Tacho View", "upload is completed!");
		       }
		});
		
		//handle errors
		btnUpload.addErrorListener(new Plupload.ErrorListener() {
		       @Override
		       public void onError(PluploadError error) {
		    	   NotificationHelper.sendErrorNotification("Tacho View", error.getMessage());
		       }
		});
	}
	
	// navigation add listener toolbar	
	public void addUploadTachosListener(FileUploadedListener listener) {
		this.fileUploadedListener = listener;		
	}
	public void addSelectAllTachosListener(ClickSelectAllTachosListener listener) {
		this.clickSelectAllTachosListener = listener;		
	}
	public void addUnselectAllTachosListener(ClickUnselectAllTachosListener listener) {
		this.clickUnselectAllTachosListener = listener;		
	}
	
	public interface ClickSelectAllTachosListener extends Serializable {
        public void selectAllTachosClick(ClickToolbarEvent event);
    }
	public interface ClickUnselectAllTachosListener extends Serializable {
        public void unselectAllTachosClick(ClickToolbarEvent event);
    }		
	public interface ClickDownloadListener extends Serializable {
        public void downloadClick(ClickToolbarEvent event);
    }	
	
	public Button getDownloadComponent() {
		return btnDownload;
	}
	
	public class ClickToolbarEvent extends ClickEvent {
		private int index;
		private Object register;
		
		public ClickToolbarEvent(Component source) {
            super(source);
        }
		
		public ClickToolbarEvent(Component source, MouseEventDetails details) {
			super(source, details);
		}
		
		public ClickToolbarEvent(Component source, MouseEventDetails details, Object register, int index) {
			super(source, details);
			
			this.index = index;
			this.register = register;
		}

		public int getIndex() {
			return this.index;			
		}
		
		public Object getRegister() {
			return this.register;			
		}		
	}
	
	@Override
	protected void updateLabels() {
		btnSelectAllTachos.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.ToolbarTacho.btnSelectAllTachos.description"));
		btnUnselectAllTachos.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.ToolbarTacho.btnUnselectAllTachos.description"));		
		btnUpload.setCaption(getI18N().getMessage("com.thingtrack.workbench.component.ToolbarTacho.btnUpload.caption"));
		btnUpload.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.ToolbarTacho.btnUpload.description"));
		btnDownload.setCaption(getI18N().getMessage("com.thingtrack.workbench.component.ToolbarTacho.btnDownload.caption"));
		btnDownload.setDescription(getI18N().getMessage("com.thingtrack.workbench.component.ToolbarTacho.btnDownload.description"));
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// toolbarLayout
		toolbarLayout = buildToolbarLayout();
		mainLayout.addComponent(toolbarLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildToolbarLayout() {
		// common part: create layout
		toolbarLayout = new HorizontalLayout();
		toolbarLayout.setImmediate(false);
		toolbarLayout.setWidth("-1px");
		toolbarLayout.setHeight("-1px");
		toolbarLayout.setMargin(false);
		
		// boxToolbar
		boxToolbar = buildBoxToolbar();
		toolbarLayout.addComponent(boxToolbar);
		toolbarLayout.setExpandRatio(boxToolbar, 1.0f);
		
		// separatorToolbar_02
		separatorToolbar_02 = new HorizontalLayout();
		separatorToolbar_02.setImmediate(false);
		separatorToolbar_02.setWidth("20px");
		separatorToolbar_02.setHeight("-1px");
		separatorToolbar_02.setMargin(false);
		toolbarLayout.addComponent(separatorToolbar_02);
		
		// btnUpload
		btnUpload = new Plupload();
		btnUpload.setImmediate(false);
		btnUpload.setWidth("-1px");
		btnUpload.setHeight("-1px");
		toolbarLayout.addComponent(btnUpload);
		
		// btnDownload
		btnDownload = new Button();
		btnDownload.setCaption("Button");
		btnDownload.setImmediate(true);
		btnDownload.setWidth("-1px");
		btnDownload.setHeight("-1px");
		toolbarLayout.addComponent(btnDownload);
		
		return toolbarLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildBoxToolbar() {
		// common part: create layout
		boxToolbar = new HorizontalLayout();
		boxToolbar.setImmediate(false);
		boxToolbar.setWidth("100.0%");
		boxToolbar.setHeight("-1px");
		boxToolbar.setMargin(false);
		
		// btnSelectAllTachos
		btnSelectAllTachos = new Button();
		btnSelectAllTachos.setCaption("Button");
		btnSelectAllTachos.setImmediate(true);
		btnSelectAllTachos.setWidth("-1px");
		btnSelectAllTachos.setHeight("-1px");
		boxToolbar.addComponent(btnSelectAllTachos);
		
		// btnUnselectAllTachos
		btnUnselectAllTachos = new Button();
		btnUnselectAllTachos.setCaption("Button");
		btnUnselectAllTachos.setImmediate(false);
		btnUnselectAllTachos.setWidth("-1px");
		btnUnselectAllTachos.setHeight("-1px");
		boxToolbar.addComponent(btnUnselectAllTachos);
		
		return boxToolbar;
	}
}
