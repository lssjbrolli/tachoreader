package com.thingtrack.workbench.component;

import com.google.common.eventbus.Subscribe;
import com.thingtrack.tachoreader.domain.Administrator;
import com.thingtrack.tachoreader.domain.Driver;
import com.thingtrack.tachoreader.domain.Organization;
import com.thingtrack.tachoreader.domain.User;
import com.thingtrack.workbench.WorkbenchUI;
import com.thingtrack.workbench.component.AbstractI18NCustomField;
import com.thingtrack.workbench.event.DashboardEvent.OrganizationExcludeEvent;
import com.thingtrack.workbench.event.DashboardEvent.OrganizationIncludeEvent;
import com.thingtrack.workbench.event.DashboardEventBus;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class UserField extends AbstractI18NCustomField<User> {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private ComboBox organizationDefaultField;
	@AutoGenerated
	private PasswordField passwordField;
	@AutoGenerated
	private TextField usernameField;
	
	private BeanItemContainer<Organization> organizationContainer = new BeanItemContainer<Organization>(Organization.class);
	
	private User user;
	
	public UserField() {
		buildMainLayout();	
		
		initialize();
			
    	DashboardEventBus.register(this);
    	
		// manual binding
		usernameField.addValueChangeListener(new ValueChangeListener() {		
			@Override
			public void valueChange(
					com.vaadin.data.Property.ValueChangeEvent event) {
				user.setUsername(usernameField.getValue());
				
			}
		});
		passwordField.addValueChangeListener(new ValueChangeListener() {		
			@Override
			public void valueChange(
					com.vaadin.data.Property.ValueChangeEvent event) {
				user.setPassword(passwordField.getValue());
				
			}
		});
		organizationDefaultField.addValueChangeListener(new ValueChangeListener() {			
			@Override
			public void valueChange(Property.ValueChangeEvent event) {
				Organization organization = (Organization) organizationDefaultField.getValue();
				
				if (organization != null && UserField.this.user != null)
					UserField.this.user.setOrganizationDefault(organization);
				
			}
		});
	}

	private void initialize() {
		usernameField.setNullSettingAllowed(true);
		usernameField.setNullRepresentation("");		
		passwordField.setNullSettingAllowed(true);
		passwordField.setNullRepresentation("");	
	}
	
	@Subscribe
    public void includeOrganizationRequested(final OrganizationIncludeEvent event) {
		organizationContainer.addBean(event.getOrganization());
		
	}
    
	@Subscribe
    public void excludeOrganizationRequested(final OrganizationExcludeEvent event) {
		organizationContainer.removeItem(event.getOrganization());
		
	}
	
	@Override
	protected Component initContent() {
		return mainLayout;		
	}

	@Override
	public Class<? extends User> getType() {
		return User.class;	
	}
	
	@Override
	public void attach() {
		super.attach();
		
		organizationDefaultField.setValue(WorkbenchUI.getCurrent().getUser().getOrganizationDefault());
	}
	
	@Override
	public boolean isValid() {
		boolean errorValidation = false;
		
		if (!usernameField.isValid()) {
			usernameField.setRequiredError("The username is required");
			errorValidation = true;
		}
		else
			usernameField.setRequiredError(null);
		
		if (!passwordField.isValid()) {
			passwordField.setRequiredError("The password is required");
			errorValidation = true;
		}
		else
			passwordField.setRequiredError(null);
		
		if (organizationDefaultField.getValue() == null) {
			organizationDefaultField.setRequiredError("You must select one organization");
			errorValidation = true;			
		}
		else
			organizationDefaultField.setRequiredError(null);
		
		return errorValidation;
	}
	
	@Override
    protected void setInternalValue(User user) {	        
        super.setInternalValue(user);  
        
        this.user = user;
        
        try {
        	//organizationContainer.addAll(organizationService.getAll(WorkbenchUI.getCurrent().getUser()));
        	if (WorkbenchUI.getCurrent().getUser().getAgent() instanceof Administrator)
        		organizationContainer.addAll(((Administrator)WorkbenchUI.getCurrent().getUser().getAgent()).getOrganizations());
        	else
        		organizationContainer.addBean(((Driver)WorkbenchUI.getCurrent().getUser().getAgent()).getOrganization());

        	organizationDefaultField.setContainerDataSource(organizationContainer);
        	organizationDefaultField.setItemCaptionMode(ItemCaptionMode.PROPERTY);
        	organizationDefaultField.setItemCaptionPropertyId("name");
        	organizationDefaultField.setNullSelectionAllowed(false);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        // manual binding
        if (user != null) {
	        usernameField.setValue(user.getUsername());
	        passwordField.setValue(user.getPassword());	        
	        organizationDefaultField.setValue(user.getOrganizationDefault());
        }
    }
	
	@Override
	protected void updateLabels() {
		usernameField.setCaption(getI18N().getMessage("com.thingtrack.workbench.component.UserField.usernameField.description"));
		passwordField.setCaption(getI18N().getMessage("com.thingtrack.workbench.component.UserField.passwordField.description"));
		organizationDefaultField.setCaption(getI18N().getMessage("com.thingtrack.workbench.component.UserField.organizationDefaultField.description"));
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");
		
		// usernameField
		usernameField = new TextField();
		usernameField.setCaption("Driver code");
		usernameField.setImmediate(true);
		usernameField.setWidth("250px");
		usernameField.setHeight("-1px");
		usernameField.setRequired(true);
		mainLayout.addComponent(usernameField);
		
		// passwordField
		passwordField = new PasswordField();
		passwordField.setCaption("Password");
		passwordField.setImmediate(true);
		passwordField.setWidth("250px");
		passwordField.setHeight("-1px");
		passwordField.setRequired(true);
		mainLayout.addComponent(passwordField);
		
		// organizationDefault
		organizationDefaultField = new ComboBox();
		organizationDefaultField.setCaption("Organization default");
		organizationDefaultField.setImmediate(false);
		organizationDefaultField.setWidth("200px");
		organizationDefaultField.setHeight("-1px");
		organizationDefaultField.setRequired(true);
		mainLayout.addComponent(organizationDefaultField);
		
		return mainLayout;
	}
}
